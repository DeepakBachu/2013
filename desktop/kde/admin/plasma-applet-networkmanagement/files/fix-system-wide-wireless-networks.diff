Index: libs/internals/connection.cpp
===================================================================
--- libs/internals/connection.cpp	(revision 1199918)
+++ libs/internals/connection.cpp	(working copy)
@@ -18,6 +18,9 @@
 License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
 
+
+#include <kdebug.h>
+
 #include "connection.h"
 
 #include "settings/802-11-wireless-security.h"
@@ -102,6 +105,8 @@
 
 void Connection::init()
 {
+    m_settings.clear();
+
     switch (m_type) {
         case Cdma:
             addSetting(new CdmaSetting());
@@ -282,7 +287,14 @@
 
 void Connection::setType(Connection::Type type)
 {
+    if (type == m_type)
+        return;
+
     m_type = type;
+
+    init();
+
+    kDebug() << "Connection type is set as " << typeAsString(type) << ". Settings of the connection removed since its type has been changed.";
 }
 
 // vim: sw=4 sts=4 et tw=100
Index: libs/internals/connection.h
===================================================================
--- libs/internals/connection.h	(revision 1199918)
+++ libs/internals/connection.h	(working copy)
@@ -35,6 +35,7 @@
 
 class KNMINTERNALS_EXPORT Connection
 {
+
 public:
     enum Type { Wired = 1, Wireless, Gsm, Cdma, Vpn, Pppoe };
     static QString typeAsString(Connection::Type);
@@ -54,7 +55,6 @@
     QString iconName() const;
     QUuid uuid() const;
     Connection::Type type() const;
-    void setType(Connection::Type);
     bool autoConnect() const;
     QDateTime timestamp() const;
 
@@ -65,6 +65,7 @@
      * Access all settings
      */
     QList<Setting*> settings() const;
+
     /**
      * Access a specific setting
      * @param the type of setting to retrieve
@@ -77,7 +78,16 @@
     void setUuid(const QUuid &);
     void setAutoConnect(bool);
     void setTimestamp(const QDateTime&);
+
     /**
+     * Sets connection type. If type to be set and the type of the connection is already the 
+     * same, then this method will do nothing, otherwise m_settings will be cleared and 
+     * m_type will be set as given parameter.
+     * @param type Type of the connection to be set
+     */
+    void setType(Connection::Type type);
+
+    /**
      *  Syntactic sugar for setTimestamp(QDateTime::currentDateTime())
      */
     void updateTimestamp();
