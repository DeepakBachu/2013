commit 20310a28d874aa9c8d0edf2ebd6b81f22a1685ef
Author: Ilia Kats <ilia-kats@gmx.net>
Date:   Wed May 4 22:47:30 2011 +0200

    add forgotten class declarations to make it compile
    CCMAIL: tittiatcoke@gmail.com

diff --git a/libs/ui/ipv6advancedwidget.h b/libs/ui/ipv6advancedwidget.h
index 29819ee..6b1d784 100644
--- a/libs/ui/ipv6advancedwidget.h
+++ b/libs/ui/ipv6advancedwidget.h
@@ -27,6 +27,9 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
 #include "networkipv6config.h"
 
+class QStandardItem;
+class QItemSelection;
+
 class IpV6AdvancedWidget : public QWidget
 {
 Q_OBJECT

commit 1af3510161194426ad16be7c62152cb9ecfaf165
Author: Lamarque V. Souza <lamarque@gmail.com>
Date:   Wed May 4 22:35:22 2011 -0300

    Enable 3G modem when it is unlocked and isWwanEnabled is true.

diff --git a/libs/service/networkinterfacemonitor.cpp b/libs/service/networkinterfacemonitor.cpp
index cd9fa1b..2d885b6 100644
--- a/libs/service/networkinterfacemonitor.cpp
+++ b/libs/service/networkinterfacemonitor.cpp
@@ -163,7 +163,14 @@ void NetworkInterfaceMonitor::modemInterfaceAdded(const QString & udi)
 
     connect(modem, SIGNAL(unlockRequiredChanged(const QString &)), SLOT(requestPin(const QString &)));
 
-    if (dialog || modem->unlockRequired().isEmpty()) {
+    if (modem->unlockRequired().isEmpty()) {
+        if (Solid::Control::NetworkManager::isWwanEnabled()) {
+            modem->enable(true);
+        }
+        return;
+    }
+
+    if (dialog) {
         return;
     }
 
@@ -221,6 +228,10 @@ void NetworkInterfaceMonitor::requestPin(const QString & unlockRequired)
         modem->sendPuk(dialog->puk(), dialog->pin());
     }
 
+    if (Solid::Control::NetworkManager::isWwanEnabled()) {
+        modem->enable(true);
+    }
+
 OUT:
     delete dialog;
     dialog = 0;

commit d8b18dddb7c3823c4ac6acbce47f82b4e19fc209
Merge: 1af3510 20310a2
Author: Lamarque V. Souza <lamarque@gmail.com>
Date:   Wed May 4 22:49:56 2011 -0300

    Merge branch 'master' of git://anongit.kde.org/networkmanagement

commit 436363acfe3f8aba7a30296ffcdc49b2b7795fd8
Author: Lamarque V. Souza <lamarque@gmail.com>
Date:   Thu May 5 00:06:43 2011 -0300

    Revert "Enable 3G modem when it is unlocked and isWwanEnabled is true."
    It does not work.
    
    This reverts commit 1af3510161194426ad16be7c62152cb9ecfaf165.

diff --git a/libs/service/networkinterfacemonitor.cpp b/libs/service/networkinterfacemonitor.cpp
index 2d885b6..cd9fa1b 100644
--- a/libs/service/networkinterfacemonitor.cpp
+++ b/libs/service/networkinterfacemonitor.cpp
@@ -163,14 +163,7 @@ void NetworkInterfaceMonitor::modemInterfaceAdded(const QString & udi)
 
     connect(modem, SIGNAL(unlockRequiredChanged(const QString &)), SLOT(requestPin(const QString &)));
 
-    if (modem->unlockRequired().isEmpty()) {
-        if (Solid::Control::NetworkManager::isWwanEnabled()) {
-            modem->enable(true);
-        }
-        return;
-    }
-
-    if (dialog) {
+    if (dialog || modem->unlockRequired().isEmpty()) {
         return;
     }
 
@@ -228,10 +221,6 @@ void NetworkInterfaceMonitor::requestPin(const QString & unlockRequired)
         modem->sendPuk(dialog->puk(), dialog->pin());
     }
 
-    if (Solid::Control::NetworkManager::isWwanEnabled()) {
-        modem->enable(true);
-    }
-
 OUT:
     delete dialog;
     dialog = 0;

commit c49327938a27373a77529ef49811f6547943672a
Author: Ilia Kats <ilia-kats@gmx.net>
Date:   Sun Apr 24 00:17:03 2011 +0200

    Improve handling of 802.1x certificates
    
    Certificates are now imported to $HOME/.kde/share/networkmanagement/certificates
    for user scope connections and /usr/share/kde4/apps/networkmanagement/certificates
    for system scope connections. This allows the user to move the original file out
    of the way without worrying about connections. Certificates are passed to NM using
    the path scheme to enable support for files containing multiple certificates.
    
    BUG: 209673
    REVIEW: 101275

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 6748cee..3692b44 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -77,6 +77,7 @@ add_subdirectory(kded)
 #add_subdirectory(monolithic)
 
 install( FILES networkmanagement.notifyrc DESTINATION ${DATA_INSTALL_DIR}/networkmanagement )
+install( DIRECTORY DESTINATION ${DATA_INSTALL_DIR}/networkmanagement/certificates)
 
 if (DBUS_SYSTEM_POLICY_DIR)
 install( FILES NetworkManager-kde4.conf DESTINATION ${DBUS_SYSTEM_POLICY_DIR})
diff --git a/backends/NetworkManager/nmdbussettingsconnectionprovider.cpp b/backends/NetworkManager/nmdbussettingsconnectionprovider.cpp
index 40a364f..b287e8e 100644
--- a/backends/NetworkManager/nmdbussettingsconnectionprovider.cpp
+++ b/backends/NetworkManager/nmdbussettingsconnectionprovider.cpp
@@ -296,6 +296,7 @@ void NMDBusSettingsConnectionProvider::updateConnection(const QString &uuid, Knm
 
         kDebug() << "Updating connection "<< remote->id() << pair.first->uuid().toString();
 
+        newConnection->saveCertificates();
         ConnectionDbus converter(newConnection);
         QVariantMapMap map = converter.toDbusMap();
 
@@ -335,6 +336,7 @@ void NMDBusSettingsConnectionProvider::checkConnectionAdded()
 bool NMDBusSettingsConnectionProvider::addConnection(Knm::Connection *newConnection)
 {
     Q_D(NMDBusSettingsConnectionProvider);
+    newConnection->saveCertificates();
     ConnectionDbus converter(newConnection);
     QVariantMapMap map = converter.toDbusMap();
     kDebug() << "Adding connection " << newConnection->name() << newConnection->uuid().toString();
diff --git a/libs/internals/connection.cpp b/libs/internals/connection.cpp
index e00c8ac..7085b1b 100644
--- a/libs/internals/connection.cpp
+++ b/libs/internals/connection.cpp
@@ -204,6 +204,20 @@ void Connection::init()
     }
 }
 
+void Connection::saveCertificates()
+{
+    foreach (Setting * setting, m_settings) {
+        setting->save((int)m_scope);
+    }
+}
+
+void Connection::removeCertificates()
+{
+    foreach (Setting * setting, m_settings) {
+        setting->remove();
+    }
+}
+
 QString Connection::name() const
 {
     return m_name;
diff --git a/libs/internals/connection.h b/libs/internals/connection.h
index 60516dc..bb7e21b 100644
--- a/libs/internals/connection.h
+++ b/libs/internals/connection.h
@@ -45,9 +45,10 @@ public:
     static Connection::Type typeFromString(const QString & type);
     static Connection::Type typeFromSolidType(const Solid::Control::NetworkInterface::Type type);
     static QString scopeAsString(Connection::Scope);
-    static Connection::Scope scopeFromString(const QString & scope);    
+    static Connection::Scope scopeFromString(const QString & scope);
     static QString iconName(const Connection::Type type);
-
+    void saveCertificates();
+    void removeCertificates();
     /**
      * Create a connection with a new Uuid
      */
@@ -90,8 +91,8 @@ public:
     void setTimestamp(const QDateTime&);
 
     /**
-     * Sets connection type. If type to be set and the type of the connection is already the 
-     * same, then this method will do nothing, otherwise m_settings will be cleared and 
+     * Sets connection type. If type to be set and the type of the connection is already the
+     * same, then this method will do nothing, otherwise m_settings will be cleared and
      * m_type will be set as given parameter.
      * @param type Type of the connection to be set
      */
@@ -139,7 +140,7 @@ private:
      */
     void addSetting(Setting*);
 
-    
+
     QString m_name;
     QString m_iconName;
     QUuid m_uuid;
diff --git a/libs/internals/connectionpersistence.cpp b/libs/internals/connectionpersistence.cpp
index 2862250..8c60ba9 100644
--- a/libs/internals/connectionpersistence.cpp
+++ b/libs/internals/connectionpersistence.cpp
@@ -159,11 +159,11 @@ void ConnectionPersistence::save()
         cg.writeEntry("timestamp", m_connection->timestamp());
     cg.writeEntry("icon", m_connection->iconName());
 
+    m_connection->saveCertificates();
     // save each setting
     foreach (Setting * setting, m_connection->settings()) {
         SettingPersistence * sp = persistenceFor(setting);
         sp->save();
-
     }
     m_config->sync();
 
diff --git a/libs/internals/setting.cpp b/libs/internals/setting.cpp
index e66c65a..4079b57 100644
--- a/libs/internals/setting.cpp
+++ b/libs/internals/setting.cpp
@@ -157,4 +157,14 @@ void Setting::setSecretsAvailable(bool available)
     m_secretsAvailable = available;
 }
 
+void Setting::save(int)
+{
+
+}
+
+void Setting::remove()
+{
+
+}
+
 // vim: sw=4 sts=4 et tw=100
diff --git a/libs/internals/setting.h b/libs/internals/setting.h
index b43365b..f1fec93 100644
--- a/libs/internals/setting.h
+++ b/libs/internals/setting.h
@@ -44,6 +44,11 @@ public:
     virtual bool hasVolatileSecrets() const { return false; }
     bool secretsAvailable() const;
     void setSecretsAvailable(bool secretsAvailable);
+
+    /*scope must be one of Knm::Connection::Scope, cant't include connection.h
+    here because it is already including setting.h */
+    virtual void save(int scope);
+    virtual void remove();
 protected:
     bool m_initialized;
 private:
diff --git a/libs/internals/settings/802-1x.cpp b/libs/internals/settings/802-1x.cpp
index 245507e..1c4d942 100644
--- a/libs/internals/settings/802-1x.cpp
+++ b/libs/internals/settings/802-1x.cpp
@@ -3,10 +3,15 @@
 
 #include "802-1x.h"
 
+#include <QUuid>
+#include <kstandarddirs.h>
+
 using namespace Knm;
 
+const QString Security8021xSetting::CERTIFICATE_PERSISTENCE_PATH = QLatin1String("networkmanagement/certificates/");
+
 Security8021xSetting::Security8021xSetting() : Setting(Setting::Security8021x),
-    mPhase1peapver(0), mPhase2auth(0), mPhase2autheap(0), mEnabled(false), mUseSystemCaCerts(false)
+    mPhase1peapver(0), mPhase2auth(0), mPhase2autheap(0), mEnabled(false), mUseSystemCaCerts(false), mCertificatesToDelete(0)
 {
 }
 
@@ -31,6 +36,103 @@ QByteArray Security8021xSetting::getBytes(const QString & fileName)
 
     if (file.open(QIODevice::ReadOnly)) {
         bytes = file.readAll();
+        if (bytes.startsWith("-----BEGIN CERTIFICATE-----")) {
+            bytes.remove(0,27);
+            bytes = bytes.left(bytes.indexOf("-----END CERTIFICATE-----"));
+            bytes = QByteArray::fromBase64(bytes);
+        }
     }
     return bytes;
 }
+
+QString Security8021xSetting::importCertFromPath(const QString & oldpath, const QString & newpath, Knm::Connection::Scope scope)
+{
+    if (newpath.isEmpty()) {
+        QString certificateId = QUuid::createUuid().toString();
+        QString ourCertFile;
+        switch (scope)
+        {
+            case Knm::Connection::System:
+                ourCertFile = KStandardDirs::installPath("data")+ CERTIFICATE_PERSISTENCE_PATH + certificateId;
+                break;
+            case Knm::Connection::User:
+            default:
+                ourCertFile = KStandardDirs::locateLocal("data", CERTIFICATE_PERSISTENCE_PATH + certificateId,true);
+                break;
+        }
+        // try 10 times in case the quuid already exists
+        bool success = false;
+        for (int i = 0; i < 10 && !success; i++) {
+            success = QFile::copy(oldpath, ourCertFile);
+        }
+        return ourCertFile;
+    } else {
+        QFile::remove(newpath);
+        QFile::copy(oldpath, newpath);
+        return newpath;
+    }
+}
+
+void Security8021xSetting::save(int scope)
+{
+    if (certtodelete() & Knm::Security8021xSetting::CACert) {
+        QFile::remove(pathFromCert(cacert()));
+        setCapath("");
+        setCacert(QByteArray());
+    }
+    if (certtodelete() & Knm::Security8021xSetting::ClientCert) {
+        QFile::remove(pathFromCert(clientcert()));
+        setClientcertpath("");
+        setClientcert(QByteArray());
+    }
+    if (certtodelete() & Knm::Security8021xSetting::Phase2CACert) {
+        QFile::remove(pathFromCert(phase2cacert()));
+        setPhase2capath("");
+        setPhase2cacert(QByteArray());
+    }
+    if (certtodelete() & Knm::Security8021xSetting::Phase2ClientCert) {
+        QFile::remove(pathFromCert(phase2clientcert()));
+        setPhase2clientcertpath("");
+        setCacert(QByteArray());
+    }
+    if (certtodelete() & Knm::Security8021xSetting::PrivateKey)
+    {
+        QFile::remove(pathFromCert(privatekey()));
+        setPrivatekeypath("");
+        setPrivatekey(QByteArray());
+    }
+    if (certtodelete() & Knm::Security8021xSetting::Phase2PrivateKey) {
+        QFile::remove(pathFromCert(phase2privatekey()));
+        setPhase2privatekeypath("");
+        setPhase2privatekey(QByteArray());
+    }
+
+    if (!cacerttoimport().isEmpty())
+        setCacert( certPathAsByteArray(importCertFromPath(cacerttoimport(),pathFromCert(cacert()),(Knm::Connection::Scope)scope)) );
+    if (!clientcerttoimport().isEmpty())
+        setClientcert( certPathAsByteArray(importCertFromPath(clientcerttoimport(),pathFromCert(clientcert()),(Knm::Connection::Scope)scope)) );
+    if (!phase2cacerttoimport().isEmpty())
+        setPhase2cacert( certPathAsByteArray(importCertFromPath(phase2cacerttoimport(),pathFromCert(phase2cacert()),(Knm::Connection::Scope)scope)) );
+    if (!phase2clientcerttoimport().isEmpty())
+        setPhase2clientcert( certPathAsByteArray(importCertFromPath(phase2clientcerttoimport(),pathFromCert(phase2clientcert()),(Knm::Connection::Scope)scope)) );
+    if (!privatekeytoimport().isEmpty())
+        setPrivatekey( certPathAsByteArray(importCertFromPath(privatekeytoimport(),pathFromCert(privatekey()),(Knm::Connection::Scope)scope)) );
+    if (!phase2privatekeytoimport().isEmpty())
+        setPhase2privatekey( certPathAsByteArray(importCertFromPath(phase2privatekeytoimport(),pathFromCert(phase2privatekey()),(Knm::Connection::Scope)scope)) );
+}
+
+void Security8021xSetting::remove()
+{
+    if (!cacert().isEmpty())
+        QFile::remove(pathFromCert(cacert()));
+    if (!clientcert().isEmpty())
+        QFile::remove(pathFromCert(clientcert()));
+    if (!phase2cacert().isEmpty())
+        QFile::remove(pathFromCert(phase2cacert()));
+    if (!phase2clientcert().isEmpty())
+        QFile::remove(pathFromCert(phase2clientcert()));
+    if (!privatekey().isEmpty())
+        QFile::remove(pathFromCert(privatekey()));
+    if (!phase2privatekey().isEmpty())
+        QFile::remove(pathFromCert(phase2privatekey()));
+}
\ No newline at end of file
diff --git a/libs/internals/settings/802-1x.h b/libs/internals/settings/802-1x.h
index 971ef41..2a5fce2 100644
--- a/libs/internals/settings/802-1x.h
+++ b/libs/internals/settings/802-1x.h
@@ -4,15 +4,18 @@
 #define KNM_SECURITY8021XSETTING_H
 
 #include <QFile>
+#include <QFlags>
 #include <kglobal.h>
 #include <kdebug.h>
 #include <kcoreconfigskeleton.h>
 #include "setting.h"
+#include "connection.h"
 #include "knminternals_export.h"
 namespace Knm {
 
 class KNMINTERNALS_EXPORT Security8021xSetting : public Setting
 {
+  Q_FLAGS(Certificates)
   public:
     class EnumPhase1peapver
     {
@@ -38,6 +41,9 @@ class KNMINTERNALS_EXPORT Security8021xSetting : public Setting
     Security8021xSetting( );
     ~Security8021xSetting();
 
+    enum Certificate {CACert = 0x1, ClientCert = 0x2, Phase2CACert = 0x4, Phase2ClientCert = 0x8, PrivateKey = 0x10, Phase2PrivateKey = 0x20};
+    Q_DECLARE_FLAGS(Certificates, Certificate)
+
     QString name() const;
 
     bool hasSecrets() const;
@@ -112,8 +118,6 @@ class KNMINTERNALS_EXPORT Security8021xSetting : public Setting
     void setCapath( const QString & v )
     {
         mCapath = v;
-
-        setCacert( getBytes(v));
     }
 
     /**
@@ -124,6 +128,28 @@ class KNMINTERNALS_EXPORT Security8021xSetting : public Setting
       return mCapath;
     }
 
+    void setCacertFromPath( const QString & v )
+    {
+        setCapath(v);
+        setCacert(getBytes(v));
+    }
+
+    /**
+    Get CA Cert to import
+    */
+    QString cacerttoimport() const
+    {
+        return mCacertToImport;
+    }
+
+    /**
+    Set CA Cert to import
+    */
+    void setCacerttoimport( const QString & v )
+    {
+        mCacertToImport = v;
+    }
+
     /**
       Set Client Cert
     */
@@ -146,7 +172,6 @@ class KNMINTERNALS_EXPORT Security8021xSetting : public Setting
     void setClientcertpath( const QString & v )
     {
         mClientcertpath = v;
-        setClientcert( getBytes(v));
     }
 
     /**
@@ -157,6 +182,28 @@ class KNMINTERNALS_EXPORT Security8021xSetting : public Setting
       return mClientcertpath;
     }
 
+    void setClientcertFromPath( const QString & v )
+    {
+        setClientcertpath(v);
+        setClientcert(getBytes(v));
+    }
+
+    /**
+    Get client Cert to import
+    */
+    QString clientcerttoimport() const
+    {
+        return mClientcertToImport;
+    }
+
+    /**
+    Set client Cert to import
+    */
+    void setClientcerttoimport( const QString & v )
+    {
+        mClientcertToImport = v;
+    }
+
     /**
       Set Phase 1 PEAP version
     */
@@ -259,7 +306,6 @@ class KNMINTERNALS_EXPORT Security8021xSetting : public Setting
     void setPhase2capath( const QString & v )
     {
         mPhase2capath = v;
-        setPhase2cacert( getBytes(v));
     }
 
     /**
@@ -270,6 +316,28 @@ class KNMINTERNALS_EXPORT Security8021xSetting : public Setting
       return mPhase2capath;
     }
 
+    void setPhase2cacertFromPath( const QString & v)
+    {
+        setPhase2capath(v);
+        setPhase2cacert(getBytes(v));
+    }
+
+    /**
+    Get Phase2CA Cert to import
+    */
+    QString phase2cacerttoimport() const
+    {
+        return mPhase2cacertToImport;
+    }
+
+    /**
+    Set Phase2CA Cert to import
+    */
+    void setPhase2cacerttoimport( const QString & v )
+    {
+        mPhase2cacertToImport = v;
+    }
+
     /**
       Set Phase 2 client cert
     */
@@ -292,7 +360,6 @@ class KNMINTERNALS_EXPORT Security8021xSetting : public Setting
     void setPhase2clientcertpath( const QString & v )
     {
         mPhase2clientcertpath = v;
-        setPhase2clientcert( getBytes(v));
     }
 
     /**
@@ -303,6 +370,28 @@ class KNMINTERNALS_EXPORT Security8021xSetting : public Setting
       return mPhase2clientcertpath;
     }
 
+    void setPhase2clientcertFromPath( const QString & v)
+    {
+        setPhase2clientcertpath(v);
+        setPhase2clientcert(getBytes(v));
+    }
+
+    /**
+    Get Phase2 client Cert to import
+    */
+    QString phase2clientcerttoimport() const
+    {
+        return mPhase2clientcertToImport;
+    }
+
+    /**
+    Set Phase2 client Cert to import
+    */
+    void setPhase2clientcerttoimport( const QString & v )
+    {
+        mPhase2clientcertToImport = v;
+    }
+
     /**
       Set Password
     */
@@ -341,7 +430,6 @@ class KNMINTERNALS_EXPORT Security8021xSetting : public Setting
     void setPrivatekeypath( const QString & v )
     {
         mPrivatekeypath = v;
-        setPrivatekey( getBytes(v));
     }
 
     /**
@@ -352,6 +440,28 @@ class KNMINTERNALS_EXPORT Security8021xSetting : public Setting
       return mPrivatekeypath;
     }
 
+    void setPrivatekeyFromPath( const QString & v )
+    {
+        setPrivatekeypath(v);
+        setPrivatekey(getBytes(v));
+    }
+
+    /**
+    Get private key to import
+    */
+    QString privatekeytoimport() const
+    {
+        return mPrivatekeyToImport;
+    }
+
+    /**
+    Set private key to import
+    */
+    void setPrivatekeytoimport( const QString & v )
+    {
+        mPrivatekeyToImport = v;
+    }
+
     /**
       Set Private key password
     */
@@ -390,7 +500,6 @@ class KNMINTERNALS_EXPORT Security8021xSetting : public Setting
     void setPhase2privatekeypath( const QString & v )
     {
         mPhase2privatekeypath = v;
-        setPhase2privatekey( getBytes(v));
     }
 
     /**
@@ -401,6 +510,28 @@ class KNMINTERNALS_EXPORT Security8021xSetting : public Setting
       return mPhase2privatekeypath;
     }
 
+    void setPhase2privatekeyFromPath( const QString & v )
+    {
+        setPhase2privatekeypath(v);
+        setPhase2privatekey(getBytes(v));
+    }
+
+    /**
+    Get Phase2private key to import
+    */
+    QString phase2privatekeytoimport() const
+    {
+        return mPhase2privatekeyToImport;
+    }
+
+    /**
+    Set Phase2private key to import
+    */
+    void setPhase2privatekeytoimport( const QString & v )
+    {
+        mPhase2privatekeyToImport = v;
+    }
+
     /**
       Set Phase 2 private key password
     */
@@ -471,6 +602,8 @@ class KNMINTERNALS_EXPORT Security8021xSetting : public Setting
     void setEnabled( bool v )
     {
         mEnabled = v;
+        if (!mEnabled)
+            remove();
     }
 
     /**
@@ -481,6 +614,46 @@ class KNMINTERNALS_EXPORT Security8021xSetting : public Setting
       return mEnabled;
     }
 
+    /**
+    Get Certs to delete
+    */
+    bool certtodelete() const
+    {
+        return mCertificatesToDelete;
+    }
+
+    /**
+    Set Certificates to delete
+    */
+    void addToCertToDelete( Certificate v )
+    {
+        mCertificatesToDelete |= v;
+    }
+
+    /**
+    Remove Certificates to delete
+    */
+    void removeFromCertToDelete( Certificate v )
+    {
+        mCertificatesToDelete &= !v;
+    }
+
+    QString pathFromCert(const QByteArray & cert)
+    {
+        int len =  cert.size() - 7;
+        if (len < 0)
+            return QString();
+        QString path = QString(cert.right(len));
+        return path;
+    }
+
+    QByteArray certPathAsByteArray(const QString & path)
+    {
+        QByteArray arr = QByteArray("file://" + path.toUtf8());
+        arr.append('\0');
+        return arr;
+    }
+
     enum EapMethod
     {
         ttls = 1,
@@ -520,7 +693,9 @@ kDebug() << eap;
         return eapFlags;
     }
 
-
+    QString importCertFromPath( const QString & oldpath, const QString & newpath = QString(), Knm::Connection::Scope scope = Knm::Connection::User );
+    void save(int scope = (int) Knm::Connection::User);
+    void remove();
 
   protected:
 
@@ -530,8 +705,10 @@ kDebug() << eap;
     QString mAnonymousidentity;
     QByteArray mCacert;
     QString mCapath;
+    QString mCacertToImport;
     QByteArray mClientcert;
     QString mClientcertpath;
+    QString mClientcertToImport;
     int mPhase1peapver;
     QString mPhase1peaplabel;
     QString mPhase1fastprovisioning;
@@ -539,21 +716,27 @@ kDebug() << eap;
     int mPhase2autheap;
     QByteArray mPhase2cacert;
     QString mPhase2capath;
+    QString mPhase2cacertToImport;
     QByteArray mPhase2clientcert;
     QString mPhase2clientcertpath;
+    QString mPhase2clientcertToImport;
     QString mPassword;
     QByteArray mPrivatekey;
     QString mPrivatekeypath;
+    QString mPrivatekeyToImport;
     QString mPrivatekeypassword;
     QByteArray mPhase2privatekey;
     QString mPhase2privatekeypath;
+    QString mPhase2privatekeyToImport;
     QString mPhase2privatekeypassword;
     QString mPin;
     QString mPsk;
     bool mEnabled;
     bool mUseSystemCaCerts;
+    Certificates mCertificatesToDelete;
 
   private:
+    static const QString CERTIFICATE_PERSISTENCE_PATH;
     QByteArray getBytes(const QString & fileName);
 };
 
diff --git a/libs/internals/settings/802-1xpersistence.cpp b/libs/internals/settings/802-1xpersistence.cpp
index b7b9c42..c14591d 100644
--- a/libs/internals/settings/802-1xpersistence.cpp
+++ b/libs/internals/settings/802-1xpersistence.cpp
@@ -23,9 +23,9 @@ void Security8021xPersistence::load()
   setting->setEap(m_config->readEntry("eap", QStringList()));
   setting->setIdentity(m_config->readEntry("identity", ""));
   setting->setAnonymousidentity(m_config->readEntry("anonymousidentity", ""));
-  setting->setCacert(m_config->readEntry("cacert", QByteArray()));
+  setting->setCacert(QByteArray::fromBase64(m_config->readEntry("cacert", QByteArray())));
   setting->setCapath(m_config->readEntry("capath", ""));
-  setting->setClientcert(m_config->readEntry("clientcert", QByteArray()));
+  setting->setClientcert(QByteArray::fromBase64(m_config->readEntry("clientcert", QByteArray())));
   setting->setClientcertpath(m_config->readEntry("clientcertpath", ""));
   {
     QString contents = m_config->readEntry("phase1peapver", "automatic");
@@ -75,21 +75,21 @@ void Security8021xPersistence::load()
       setting->setPhase2autheap(Security8021xSetting::EnumPhase2autheap::tls);
 
   }
-  setting->setPhase2cacert(m_config->readEntry("phase2cacert", QByteArray()));
+  setting->setPhase2cacert(QByteArray::fromBase64(m_config->readEntry("phase2cacert", QByteArray())));
   setting->setPhase2capath(m_config->readEntry("phase2capath", ""));
-  setting->setPhase2clientcert(m_config->readEntry("phase2clientcert", QByteArray()));
+  setting->setPhase2clientcert(QByteArray::fromBase64(m_config->readEntry("phase2clientcert", QByteArray())));
   setting->setPhase2clientcertpath(m_config->readEntry("phase2clientcertpath", ""));
   // SECRET
   if (m_storageMode == ConnectionPersistence::PlainText) {
     setting->setPassword(m_config->readEntry("password", ""));
   }
-  setting->setPrivatekey(m_config->readEntry("privatekey", QByteArray()));
+  setting->setPrivatekey(QByteArray::fromBase64(m_config->readEntry("privatekey", QByteArray())));
   setting->setPrivatekeypath(m_config->readEntry("privatekeypath", ""));
   // SECRET
   if (m_storageMode == ConnectionPersistence::PlainText) {
     setting->setPrivatekeypassword(m_config->readEntry("privatekeypassword", ""));
   }
-  setting->setPhase2privatekey(m_config->readEntry("phase2privatekey", QByteArray()));
+  setting->setPhase2privatekey(QByteArray::fromBase64(m_config->readEntry("phase2privatekey", QByteArray())));
   setting->setPhase2privatekeypath(m_config->readEntry("phase2privatekeypath", ""));
   // SECRET
   if (m_storageMode == ConnectionPersistence::PlainText) {
@@ -110,9 +110,9 @@ void Security8021xPersistence::save()
   m_config->writeEntry("eap", setting->eap());
   m_config->writeEntry("identity", setting->identity());
   m_config->writeEntry("anonymousidentity", setting->anonymousidentity());
-  m_config->writeEntry("cacert", setting->cacert());
+  m_config->writeEntry("cacert", setting->cacert().toBase64());
   m_config->writeEntry("capath", setting->capath());
-  m_config->writeEntry("clientcert", setting->clientcert());
+  m_config->writeEntry("clientcert", setting->clientcert().toBase64());
   m_config->writeEntry("clientcertpath", setting->clientcertpath());
   switch (setting->phase1peapver()) {
     case Security8021xSetting::EnumPhase1peapver::automatic:
@@ -173,21 +173,21 @@ void Security8021xPersistence::save()
       m_config->writeEntry("phase2autheap", "tls");
       break;
   }
-  m_config->writeEntry("phase2cacert", setting->phase2cacert());
+  m_config->writeEntry("phase2cacert", setting->phase2cacert().toBase64());
   m_config->writeEntry("phase2capath", setting->phase2capath());
-  m_config->writeEntry("phase2clientcert", setting->phase2clientcert());
+  m_config->writeEntry("phase2clientcert", setting->phase2clientcert().toBase64());
   m_config->writeEntry("phase2clientcertpath", setting->phase2clientcertpath());
   // SECRET
   if (m_storageMode == ConnectionPersistence::PlainText) {
     m_config->writeEntry("password", setting->password());
   }
-  m_config->writeEntry("privatekey", setting->privatekey());
+  m_config->writeEntry("privatekey", setting->privatekey().toBase64());
   m_config->writeEntry("privatekeypath", setting->privatekeypath());
   // SECRET
   if (m_storageMode == ConnectionPersistence::PlainText) {
     m_config->writeEntry("privatekeypassword", setting->privatekeypassword());
   }
-  m_config->writeEntry("phase2privatekey", setting->phase2privatekey());
+  m_config->writeEntry("phase2privatekey", setting->phase2privatekey().toBase64());
   m_config->writeEntry("phase2privatekeypath", setting->phase2privatekeypath());
   // SECRET
   if (m_storageMode == ConnectionPersistence::PlainText) {
diff --git a/libs/ui/security/eapmethodleap.cpp b/libs/ui/security/eapmethodleap.cpp
index 199a8b8..9725062 100644
--- a/libs/ui/security/eapmethodleap.cpp
+++ b/libs/ui/security/eapmethodleap.cpp
@@ -57,6 +57,7 @@ void EapMethodLeap::writeConfig()
     d->setting->setIdentity(leUsername->text());
     d->setting->setPassword(lePassword->text());
     d->setting->setUseSystemCaCerts(false);
+    d->setting->remove();
 }
 
 void EapMethodLeap::readSecrets()
diff --git a/libs/ui/security/eapmethodpeapbase.ui b/libs/ui/security/eapmethodpeapbase.ui
index 4b9c5fd..5a18961 100644
--- a/libs/ui/security/eapmethodpeapbase.ui
+++ b/libs/ui/security/eapmethodpeapbase.ui
@@ -6,8 +6,8 @@
    <rect>
     <x>0</x>
     <y>0</y>
-    <width>400</width>
-    <height>300</height>
+    <width>365</width>
+    <height>333</height>
    </rect>
   </property>
   <layout class="QVBoxLayout" name="verticalLayout">
@@ -29,22 +29,6 @@
      <item row="0" column="1">
       <widget class="KLineEdit" name="leAnonIdentity"/>
      </item>
-     <item row="1" column="0">
-      <widget class="QLabel" name="label_3">
-       <property name="text">
-        <string>CA Certi&amp;ficate:</string>
-       </property>
-       <property name="alignment">
-        <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>
-       </property>
-       <property name="buddy">
-        <cstring>kurCaCert</cstring>
-       </property>
-      </widget>
-     </item>
-     <item row="1" column="1">
-      <widget class="KUrlRequester" name="kurCaCert"/>
-     </item>
      <item row="3" column="0">
       <widget class="QLabel" name="label_6">
        <property name="text">
@@ -82,8 +66,64 @@
        <property name="text">
         <string>Use Syste&amp;m CA Certs</string>
        </property>
+       <property name="tristate">
+        <bool>false</bool>
+       </property>
       </widget>
      </item>
+     <item row="1" column="0">
+      <widget class="QLabel" name="label_3">
+       <property name="text">
+        <string>CA Certi&amp;ficate:</string>
+       </property>
+       <property name="alignment">
+        <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>
+       </property>
+       <property name="buddy">
+        <cstring>caCertLoad</cstring>
+       </property>
+      </widget>
+     </item>
+     <item row="1" column="1">
+      <layout class="QHBoxLayout" name="horizontalLayout_2">
+       <item>
+        <widget class="KLed" name="caCertLed">
+         <property name="sizePolicy">
+          <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
+           <horstretch>0</horstretch>
+           <verstretch>0</verstretch>
+          </sizepolicy>
+         </property>
+         <property name="state">
+          <enum>KLed::Off</enum>
+         </property>
+         <property name="look">
+          <enum>KLed::Flat</enum>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QLabel" name="caCertLoadedLabel">
+         <property name="text">
+          <string/>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="KPushButton" name="caCertLoad">
+         <property name="sizePolicy">
+          <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
+           <horstretch>0</horstretch>
+           <verstretch>0</verstretch>
+          </sizepolicy>
+         </property>
+         <property name="text">
+          <string>Load</string>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </item>
     </layout>
    </item>
    <item>
@@ -103,9 +143,14 @@
  </widget>
  <customwidgets>
   <customwidget>
-   <class>KUrlRequester</class>
-   <extends>QFrame</extends>
-   <header>kurlrequester.h</header>
+   <class>KLed</class>
+   <extends>QWidget</extends>
+   <header>kled.h</header>
+  </customwidget>
+  <customwidget>
+   <class>KPushButton</class>
+   <extends>QPushButton</extends>
+   <header>kpushbutton.h</header>
   </customwidget>
   <customwidget>
    <class>KLineEdit</class>
@@ -120,7 +165,6 @@
  </customwidgets>
  <tabstops>
   <tabstop>leAnonIdentity</tabstop>
-  <tabstop>kurCaCert</tabstop>
   <tabstop>cboPeapVersion</tabstop>
  </tabstops>
  <resources/>
@@ -128,16 +172,16 @@
   <connection>
    <sender>chkUseSystemCaCerts</sender>
    <signal>toggled(bool)</signal>
-   <receiver>kurCaCert</receiver>
+   <receiver>caCertLoad</receiver>
    <slot>setDisabled(bool)</slot>
    <hints>
     <hint type="sourcelabel">
-     <x>222</x>
-     <y>83</y>
+     <x>228</x>
+     <y>72</y>
     </hint>
     <hint type="destinationlabel">
-     <x>221</x>
-     <y>54</y>
+     <x>286</x>
+     <y>44</y>
     </hint>
    </hints>
   </connection>
diff --git a/libs/ui/security/eapmethodtlsbase.ui b/libs/ui/security/eapmethodtlsbase.ui
index 80a5c1f..d1bec83 100644
--- a/libs/ui/security/eapmethodtlsbase.ui
+++ b/libs/ui/security/eapmethodtlsbase.ui
@@ -38,13 +38,10 @@
         <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>
        </property>
        <property name="buddy">
-        <cstring>kurClientCert</cstring>
+        <cstring>clientCertLoad</cstring>
        </property>
       </widget>
      </item>
-     <item row="1" column="1">
-      <widget class="KUrlRequester" name="kurClientCert"/>
-     </item>
      <item row="2" column="0">
       <widget class="QLabel" name="label_3">
        <property name="text">
@@ -54,13 +51,10 @@
         <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>
        </property>
        <property name="buddy">
-        <cstring>kurCaCert</cstring>
+        <cstring>caCertLoad</cstring>
        </property>
       </widget>
      </item>
-     <item row="2" column="1">
-      <widget class="KUrlRequester" name="kurCaCert"/>
-     </item>
      <item row="4" column="0">
       <widget class="QLabel" name="label_4">
        <property name="text">
@@ -70,13 +64,10 @@
         <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>
        </property>
        <property name="buddy">
-        <cstring>kurPrivateKey</cstring>
+        <cstring>privateKeyLoad</cstring>
        </property>
       </widget>
      </item>
-     <item row="4" column="1">
-      <widget class="KUrlRequester" name="kurPrivateKey"/>
-     </item>
      <item row="5" column="0">
       <widget class="QLabel" name="label_5">
        <property name="text">
@@ -104,6 +95,126 @@
        </property>
       </widget>
      </item>
+     <item row="1" column="1">
+      <layout class="QHBoxLayout" name="horizontalLayout">
+       <item>
+        <widget class="KLed" name="clientCertLed">
+         <property name="sizePolicy">
+          <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
+           <horstretch>0</horstretch>
+           <verstretch>0</verstretch>
+          </sizepolicy>
+         </property>
+         <property name="state">
+          <enum>KLed::Off</enum>
+         </property>
+         <property name="look">
+          <enum>KLed::Flat</enum>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QLabel" name="clientCertLoadedLabel">
+         <property name="text">
+          <string/>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="KPushButton" name="clientCertLoad">
+         <property name="sizePolicy">
+          <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
+           <horstretch>0</horstretch>
+           <verstretch>0</verstretch>
+          </sizepolicy>
+         </property>
+         <property name="text">
+          <string>Load</string>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </item>
+     <item row="2" column="1">
+      <layout class="QHBoxLayout" name="horizontalLayout_2">
+       <item>
+        <widget class="KLed" name="caCertLed">
+         <property name="sizePolicy">
+          <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
+           <horstretch>0</horstretch>
+           <verstretch>0</verstretch>
+          </sizepolicy>
+         </property>
+         <property name="state">
+          <enum>KLed::Off</enum>
+         </property>
+         <property name="look">
+          <enum>KLed::Flat</enum>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QLabel" name="caCertLoadedLabel">
+         <property name="text">
+          <string/>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="KPushButton" name="caCertLoad">
+         <property name="sizePolicy">
+          <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
+           <horstretch>0</horstretch>
+           <verstretch>0</verstretch>
+          </sizepolicy>
+         </property>
+         <property name="text">
+          <string>Load</string>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </item>
+     <item row="4" column="1">
+      <layout class="QHBoxLayout" name="horizontalLayout_3">
+       <item>
+        <widget class="KLed" name="privateKeyLed">
+         <property name="sizePolicy">
+          <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
+           <horstretch>0</horstretch>
+           <verstretch>0</verstretch>
+          </sizepolicy>
+         </property>
+         <property name="state">
+          <enum>KLed::Off</enum>
+         </property>
+         <property name="look">
+          <enum>KLed::Flat</enum>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QLabel" name="privateKeyLoadedLabel">
+         <property name="text">
+          <string/>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="KPushButton" name="privateKeyLoad">
+         <property name="sizePolicy">
+          <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
+           <horstretch>0</horstretch>
+           <verstretch>0</verstretch>
+          </sizepolicy>
+         </property>
+         <property name="text">
+          <string>Load</string>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </item>
     </layout>
    </item>
    <item>
@@ -123,9 +234,14 @@
  </widget>
  <customwidgets>
   <customwidget>
-   <class>KUrlRequester</class>
-   <extends>QFrame</extends>
-   <header>kurlrequester.h</header>
+   <class>KLed</class>
+   <extends>QWidget</extends>
+   <header>kled.h</header>
+  </customwidget>
+  <customwidget>
+   <class>KPushButton</class>
+   <extends>QPushButton</extends>
+   <header>kpushbutton.h</header>
   </customwidget>
   <customwidget>
    <class>KLineEdit</class>
@@ -138,16 +254,16 @@
   <connection>
    <sender>chkUseSystemCaCerts</sender>
    <signal>toggled(bool)</signal>
-   <receiver>kurCaCert</receiver>
+   <receiver>caCertLoad</receiver>
    <slot>setDisabled(bool)</slot>
    <hints>
     <hint type="sourcelabel">
-     <x>221</x>
-     <y>110</y>
+     <x>258</x>
+     <y>100</y>
     </hint>
     <hint type="destinationlabel">
-     <x>224</x>
-     <y>84</y>
+     <x>352</x>
+     <y>72</y>
     </hint>
    </hints>
   </connection>
diff --git a/libs/ui/security/eapmethodttlsbase.ui b/libs/ui/security/eapmethodttlsbase.ui
index 4f2e1a9..b97fee3 100644
--- a/libs/ui/security/eapmethodttlsbase.ui
+++ b/libs/ui/security/eapmethodttlsbase.ui
@@ -38,13 +38,10 @@
         <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>
        </property>
        <property name="buddy">
-        <cstring>kurCaCert</cstring>
+        <cstring>caCertLoad</cstring>
        </property>
       </widget>
      </item>
-     <item row="1" column="1">
-      <widget class="KUrlRequester" name="kurCaCert"/>
-     </item>
      <item row="2" column="1">
       <widget class="QCheckBox" name="chkUseSystemCaCerts">
        <property name="text">
@@ -52,6 +49,46 @@
        </property>
       </widget>
      </item>
+     <item row="1" column="1">
+      <layout class="QHBoxLayout" name="horizontalLayout">
+       <item>
+        <widget class="KLed" name="caCertLed">
+         <property name="sizePolicy">
+          <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
+           <horstretch>0</horstretch>
+           <verstretch>0</verstretch>
+          </sizepolicy>
+         </property>
+         <property name="state">
+          <enum>KLed::Off</enum>
+         </property>
+         <property name="look">
+          <enum>KLed::Flat</enum>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QLabel" name="caCertLoadedLabel">
+         <property name="text">
+          <string/>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="KPushButton" name="caCertLoad">
+         <property name="sizePolicy">
+          <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
+           <horstretch>0</horstretch>
+           <verstretch>0</verstretch>
+          </sizepolicy>
+         </property>
+         <property name="text">
+          <string>Load</string>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </item>
     </layout>
    </item>
    <item>
@@ -71,9 +108,14 @@
  </widget>
  <customwidgets>
   <customwidget>
-   <class>KUrlRequester</class>
-   <extends>QFrame</extends>
-   <header>kurlrequester.h</header>
+   <class>KLed</class>
+   <extends>QWidget</extends>
+   <header>kled.h</header>
+  </customwidget>
+  <customwidget>
+   <class>KPushButton</class>
+   <extends>QPushButton</extends>
+   <header>kpushbutton.h</header>
   </customwidget>
   <customwidget>
    <class>KLineEdit</class>
@@ -86,16 +128,16 @@
   <connection>
    <sender>chkUseSystemCaCerts</sender>
    <signal>toggled(bool)</signal>
-   <receiver>kurCaCert</receiver>
+   <receiver>caCertLoad</receiver>
    <slot>setDisabled(bool)</slot>
    <hints>
     <hint type="sourcelabel">
-     <x>220</x>
-     <y>74</y>
+     <x>258</x>
+     <y>72</y>
     </hint>
     <hint type="destinationlabel">
-     <x>224</x>
-     <y>59</y>
+     <x>364</x>
+     <y>44</y>
     </hint>
    </hints>
   </connection>
diff --git a/libs/ui/security/peapwidget.cpp b/libs/ui/security/peapwidget.cpp
index 2fc502b..0b4aa64 100644
--- a/libs/ui/security/peapwidget.cpp
+++ b/libs/ui/security/peapwidget.cpp
@@ -23,6 +23,8 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
 #include <nm-setting-8021x.h>
 #include <connection.h>
+#include <kfiledialog.h>
+#include <KUser>
 
 #include "eapmethodstack.h"
 #include "eapmethodsimple.h"
@@ -43,7 +45,9 @@ PeapWidget::PeapWidget(Knm::Connection* connection, QWidget * parent)
             i18nc("GTC inner auth method", "GTC"));
     gridLayout->addWidget(d->innerAuth, 4, 0, 2, 2);
 
-    kurCaCert->setMode(KFile::LocalOnly);
+    connect(chkUseSystemCaCerts,SIGNAL(toggled(bool)),this,SLOT(toggleSystemCa(bool)));
+    connect(caCertLoad,SIGNAL(clicked()),this,SLOT(loadCert()));
+    caCertLoad->setIcon(KIcon("document-open"));
 }
 
 PeapWidget::~PeapWidget()
@@ -63,13 +67,14 @@ void PeapWidget::readConfig()
 
     if (d->setting->useSystemCaCerts()) {
         chkUseSystemCaCerts->setChecked(true);
-        kurCaCert->setEnabled(false);
-        kurCaCert->clear();
+        caCertLoad->setEnabled(false);
     } else {
         chkUseSystemCaCerts->setChecked(false);
-        QString capath = d->setting->capath();
-        if (!capath.isEmpty())
-            kurCaCert->setUrl(capath);
+        if (!d->setting->cacert().isEmpty()) {
+            setText(true);
+        } else {
+           setText(false);
+        }
     }
 
     if (d->setting->phase2auth() != Knm::Security8021xSetting::EnumPhase2auth::none) {
@@ -94,15 +99,9 @@ void PeapWidget::writeConfig()
 
     if (chkUseSystemCaCerts->isChecked()) {
         d->setting->setUseSystemCaCerts(true);
-        d->setting->setCapath("");
+        d->setting->addToCertToDelete(Knm::Security8021xSetting::CACert);
     } else {
         d->setting->setUseSystemCaCerts(false);
-        KUrl url = kurCaCert->url();
-        if (!url.directory().isEmpty() && !url.fileName().isEmpty())
-            d->setting->setCapath(url.directory() + '/' + url.fileName());
-        else {
-            d->setting->setCapath(QString());
-        }
     }
 
     d->innerAuth->writeConfig();
@@ -116,4 +115,36 @@ void PeapWidget::readSecrets()
     d->innerAuth->readSecrets();
 }
 
+void PeapWidget::loadCert()
+{
+    Q_D(EapMethodInnerAuth);
+    QString newcert = KFileDialog::getOpenFileName(KUser().homeDir(),"",this,i18nc("File chooser dialog title for certificate loading","Load Certificate"));
+    if (!newcert.isEmpty()) {
+        d->setting->setCacerttoimport(newcert);
+        setText(true);
+    }
+}
+
+void PeapWidget::toggleSystemCa(bool toggled)
+{
+    Q_D(EapMethodInnerAuth);
+    if (toggled)
+        setText(false);
+    else if (!d->setting->capath().isEmpty() || !d->setting->cacerttoimport().isEmpty())
+        setText(true);
+}
+
+void PeapWidget::setText(bool loaded)
+{
+    if (loaded) {
+        caCertLoad->setText(i18nc("Text to display on certificate button a certificate is already loaded","Load new"));
+        caCertLoadedLabel->setText(i18nc("Text to display on CA certificate LED label when certificate is already loaded","Loaded"));
+        caCertLed->setState(KLed::On);
+    } else {
+        caCertLoad->setText(i18nc("Text to display on CA certificate button when no certificate is loaded yet","Load"));
+        caCertLoadedLabel->setText("");
+        caCertLed->setState(KLed::Off);
+    }
+}
+
 // vim: sw=4 sts=4 et tw=100
diff --git a/libs/ui/security/peapwidget.h b/libs/ui/security/peapwidget.h
index 51ad781..8a04f14 100644
--- a/libs/ui/security/peapwidget.h
+++ b/libs/ui/security/peapwidget.h
@@ -7,7 +7,7 @@ modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; either version 2 of
 the License or (at your option) version 3 or any later version
 accepted by the membership of KDE e.V. (or its successor approved
-by the membership of KDE e.V.), which shall act as a proxy 
+by the membership of KDE e.V.), which shall act as a proxy
 defined in Section 14 of version 3 of the license.
 
 This program is distributed in the hope that it will be useful,
@@ -40,7 +40,11 @@ public:
     void readConfig();
     void writeConfig();
     void readSecrets();
-
+private:
+     void setText(bool);
+private Q_SLOTS:
+    void loadCert();
+    void toggleSystemCa(bool);
 };
 
 #endif
diff --git a/libs/ui/security/tlswidget.cpp b/libs/ui/security/tlswidget.cpp
index 1d28636..64c2292 100644
--- a/libs/ui/security/tlswidget.cpp
+++ b/libs/ui/security/tlswidget.cpp
@@ -7,7 +7,7 @@ modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; either version 2 of
 the License or (at your option) version 3 or any later version
 accepted by the membership of KDE e.V. (or its successor approved
-by the membership of KDE e.V.), which shall act as a proxy 
+by the membership of KDE e.V.), which shall act as a proxy
 defined in Section 14 of version 3 of the license.
 
 This program is distributed in the hope that it will be useful,
@@ -26,6 +26,9 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
 #include "eapmethod_p.h"
 
+#include <kfiledialog.h>
+#include <KUser>
+
 class TlsWidgetPrivate : public EapMethodPrivate
 {
 public:
@@ -35,12 +38,21 @@ public:
 
     }
     bool inner;
+    enum Certs {ClientCert = 0, CACert, PrivateKey};
 };
 
 TlsWidget::TlsWidget(bool isInnerMethod, Knm::Connection* connection, QWidget * parent)
 : EapMethod(*new TlsWidgetPrivate(isInnerMethod), connection, parent)
 {
     setupUi(this);
+    connect(chkUseSystemCaCerts,SIGNAL(toggled(bool)),this,SLOT(toggleSystemCa(bool)));
+
+    connect(clientCertLoad,SIGNAL(clicked()),this,SLOT(loadCert()));
+    connect(caCertLoad,SIGNAL(clicked()),this,SLOT(loadCert()));
+    connect(privateKeyLoad,SIGNAL(clicked()),this,SLOT(loadCert()));
+    clientCertLoad->setIcon(KIcon("document-open"));
+    caCertLoad->setIcon(KIcon("document-open"));
+    privateKeyLoad->setIcon(KIcon("document-open"));
 }
 
 TlsWidget::~TlsWidget()
@@ -60,34 +72,26 @@ void TlsWidget::readConfig()
     QString value;
     if (d->setting->useSystemCaCerts()) {
         chkUseSystemCaCerts->setChecked(true);
-        kurCaCert->setEnabled(false);
-        kurClientCert->clear();
+        caCertLoad->setEnabled(false);
     } else {
-
-        if (d->inner) {
-            value = d->setting->phase2capath();
+        if (!d->setting->cacert().isEmpty()) {
+            setText(d->CACert,true);
         } else {
-            value = d->setting->capath();
+            setText(d->CACert,false);
         }
-        if (!value.isEmpty())
-            kurCaCert->setUrl(value);
     }
 
-    if (d->inner) {
-        value = d->setting->phase2clientcertpath();
+    if (!d->setting->clientcert().isEmpty()) {
+        setText(d->ClientCert,true);
     } else {
-        value = d->setting->clientcertpath();
+        setText(d->ClientCert,false);
     }
-    if (!value.isEmpty())
-        kurClientCert->setUrl(value);
 
-    if (d->inner) {
-        value = d->setting->phase2privatekeypath();
+    if (!d->setting->privatekey().isEmpty()) {
+        setText(d->PrivateKey,true);
     } else {
-        value = d->setting->privatekeypath();
+        setText(d->PrivateKey,false);
     }
-    if (!value.isEmpty())
-        kurPrivateKey->setUrl(value);
 }
 
 void TlsWidget::writeConfig()
@@ -96,6 +100,19 @@ void TlsWidget::writeConfig()
     if (!d->inner) {
         // make it TLS
         d->setting->setEapFlags(Knm::Security8021xSetting::tls);
+        d->setting->addToCertToDelete(Knm::Security8021xSetting::Phase2CACert);
+        d->setting->addToCertToDelete(Knm::Security8021xSetting::Phase2ClientCert);
+        d->setting->addToCertToDelete(Knm::Security8021xSetting::Phase2PrivateKey);
+        d->setting->setPhase2cacerttoimport("");
+        d->setting->setPhase2clientcerttoimport("");
+        d->setting->setPhase2privatekeytoimport("");
+    } else {
+        d->setting->addToCertToDelete(Knm::Security8021xSetting::CACert);
+        d->setting->addToCertToDelete(Knm::Security8021xSetting::ClientCert);
+        d->setting->addToCertToDelete(Knm::Security8021xSetting::PrivateKey);
+        d->setting->setCacerttoimport("");
+        d->setting->setClientcerttoimport("");
+        d->setting->setPrivatekeytoimport("");
     }
 
     // TLS specifics
@@ -105,43 +122,10 @@ void TlsWidget::writeConfig()
     KUrl url;
     if (chkUseSystemCaCerts->isChecked()) {
         d->setting->setUseSystemCaCerts(true);
-        d->setting->setPhase2capath("");
-        d->setting->setCapath("");
-    } else {
-        url = kurCaCert->url();
-        if (!url.directory().isEmpty() && !url.fileName().isEmpty()) {
-            QString path = url.directory() + '/' + url.fileName();
-            if (d->inner) {
-                d->setting->setPhase2capath(path);
-            } else {
-                d->setting->setCapath(path);
-            }
-        }
-    }
-
-    url = kurClientCert->url();
-    if (!url.directory().isEmpty() && !url.fileName().isEmpty()) {
-        QString path = url.directory() + '/' + url.fileName();
-        if (d->inner) {
-            d->setting->setPhase2clientcertpath(path);
-        } else {
-            d->setting->setClientcertpath(path);
-        }
-    }
-
-    url = kurPrivateKey->url();
-    if (!url.directory().isEmpty() && !url.fileName().isEmpty()) {
-        QString path = url.directory() + '/' + url.fileName();
-        if (d->inner) {
-            d->setting->setPhase2privatekeypath(path);
-        } else {
-            d->setting->setPrivatekeypath(path);
-        }
-    }
-    if (d->inner) {
-        d->setting->setPhase2privatekeypassword(lePrivateKeyPassword->text());
+        d->setting->addToCertToDelete(Knm::Security8021xSetting::CACert);
+        d->setting->addToCertToDelete(Knm::Security8021xSetting::Phase2CACert);
     } else {
-        d->setting->setPrivatekeypassword(lePrivateKeyPassword->text());
+        d->setting->setUseSystemCaCerts(false);
     }
 }
 
@@ -160,4 +144,97 @@ void TlsWidget::setShowPasswords(bool on)
     lePrivateKeyPassword->setPasswordMode(!on);
 }
 
+void TlsWidget::loadCert()
+{
+    Q_D(TlsWidget);
+    QString objectname = sender()->objectName();
+    if (d->inner) {
+        if (objectname == QLatin1String("clientCertLoad")) {
+            QString newcert = KFileDialog::getOpenFileName(KUser().homeDir(),"",this,i18nc("File chooser dialog title for certificate loading","Load Certificate"));
+            if (!newcert.isEmpty()) {
+                d->setting->setPhase2clientcerttoimport(newcert);
+                setText(d->ClientCert,true);
+            }
+        } else if (objectname == QLatin1String("caCertLoad")) {
+            QString newcert = KFileDialog::getOpenFileName(KUser().homeDir(),"",this,i18nc("File chooser dialog title for certificate loading","Load Certificate"));
+            if (!newcert.isEmpty()) {
+                d->setting->setPhase2cacerttoimport(newcert);
+                setText(d->CACert,true);
+            }
+        } else if (objectname == QLatin1String("privateKeyLoad")) {
+            QString newcert = KFileDialog::getOpenFileName(KUser().homeDir(),"",this,i18nc("File chooser dialog title for certificate loading","Load Certificate"));
+            if (!newcert.isEmpty()) {
+                d->setting->setPhase2privatekeytoimport(newcert);
+                setText(d->PrivateKey,true);
+            }
+        }
+    } else {
+        if (objectname == QLatin1String("clientCertLoad")) {
+            QString newcert = KFileDialog::getOpenFileName(KUser().homeDir(),"",this,i18nc("File chooser dialog title for certificate loading","Load Certificate"));
+            if (!newcert.isEmpty()) {
+                d->setting->setClientcerttoimport(newcert);
+                setText(d->ClientCert,true);
+            }
+        } else if (objectname == QLatin1String("caCertLoad")) {
+            QString newcert = KFileDialog::getOpenFileName(KUser().homeDir(),"",this,i18nc("File chooser dialog title for certificate loading","Load Certificate"));
+            if (!newcert.isEmpty()) {
+                d->setting->setCacerttoimport(newcert);
+                setText(d->CACert,true);
+            }
+        } else if (objectname == QLatin1String("privateKeyLoad")) {
+            QString newcert = KFileDialog::getOpenFileName(KUser().homeDir(),"",this,i18nc("File chooser dialog title for certificate loading","Load Certificate"));
+            if (!newcert.isEmpty()) {
+                d->setting->setPrivatekeytoimport(newcert);
+                setText(d->PrivateKey,true);
+            }
+        }
+    }
+}
+
+void TlsWidget::toggleSystemCa(bool toggled)
+{
+    Q_D(TlsWidget);
+    if (toggled)
+        setText(TlsWidgetPrivate::CACert,false);
+    else if (d->inner && !d->setting->phase2cacert().isEmpty())
+        setText(TlsWidgetPrivate::CACert,true);
+    else if (!d->setting->cacert().isEmpty())
+        setText(TlsWidgetPrivate::CACert,true);
+}
+
+void TlsWidget::setText(int cert, bool loaded)
+{
+    KPushButton *button;
+    QLabel *label;
+    KLed *led;
+    switch (cert)
+    {
+        case TlsWidgetPrivate::ClientCert:
+            button = clientCertLoad;
+            label = clientCertLoadedLabel;
+            led = clientCertLed;
+            break;
+        case TlsWidgetPrivate::CACert:
+            button = caCertLoad;
+            label = caCertLoadedLabel;
+            led = caCertLed;
+            break;
+        case TlsWidgetPrivate::PrivateKey:
+        default:
+            button = privateKeyLoad;
+            label = privateKeyLoadedLabel;
+            led = privateKeyLed;
+            break;
+    }
+    if (loaded) {
+        button->setText(i18nc("Text to display on certificate button a certificate is already loaded","Load new"));
+        label->setText(i18nc("Text to display on CA certificate LED label when certificate is already loaded","Loaded"));
+        led->setState(KLed::On);
+    } else {
+        button->setText(i18nc("Text to display on CA certificate button when no certificate is loaded yet","Load"));
+        label->setText("");
+        led->setState(KLed::Off);
+    }
+}
+
 // vim: sw=4 sts=4 et tw=100
diff --git a/libs/ui/security/tlswidget.h b/libs/ui/security/tlswidget.h
index c71dcf3..9fd07d2 100644
--- a/libs/ui/security/tlswidget.h
+++ b/libs/ui/security/tlswidget.h
@@ -7,7 +7,7 @@ modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; either version 2 of
 the License or (at your option) version 3 or any later version
 accepted by the membership of KDE e.V. (or its successor approved
-by the membership of KDE e.V.), which shall act as a proxy 
+by the membership of KDE e.V.), which shall act as a proxy
 defined in Section 14 of version 3 of the license.
 
 This program is distributed in the hope that it will be useful,
@@ -48,8 +48,13 @@ public:
     void readConfig();
     void writeConfig();
     void readSecrets();
+private:
+    void setText(int,bool);
 public Q_SLOTS:
     void setShowPasswords(bool b = true);
+private Q_SLOTS:
+    void loadCert();
+    void toggleSystemCa(bool);
 };
 
 #endif
diff --git a/libs/ui/security/ttlswidget.cpp b/libs/ui/security/ttlswidget.cpp
index c135b19..07aad09 100644
--- a/libs/ui/security/ttlswidget.cpp
+++ b/libs/ui/security/ttlswidget.cpp
@@ -7,7 +7,7 @@ modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; either version 2 of
 the License or (at your option) version 3 or any later version
 accepted by the membership of KDE e.V. (or its successor approved
-by the membership of KDE e.V.), which shall act as a proxy 
+by the membership of KDE e.V.), which shall act as a proxy
 defined in Section 14 of version 3 of the license.
 
 This program is distributed in the hope that it will be useful,
@@ -24,6 +24,8 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
 #include <nm-setting-8021x.h>
 
 #include <connection.h>
+#include <kfiledialog.h>
+#include <KUser>
 
 #include "eapmethodstack.h"
 #include "eapmethodsimple.h"
@@ -49,6 +51,10 @@ TtlsWidget::TtlsWidget(Knm::Connection* connection, QWidget * parent)
             new EapMethodSimple(EapMethodSimple::Chap, connection, d->innerAuth),
             i18nc("CHAP inner auth method", "CHAP"));
     gridLayout->addWidget(d->innerAuth, 3, 0, 2, 2);
+
+    connect(chkUseSystemCaCerts,SIGNAL(toggled(bool)),this,SLOT(toggleSystemCa(bool)));
+    connect(caCertLoad,SIGNAL(clicked()),this,SLOT(loadCert()));
+    caCertLoad->setIcon(KIcon("document-open"));
 }
 
 TtlsWidget::~TtlsWidget()
@@ -67,13 +73,14 @@ void TtlsWidget::readConfig()
 
     if (d->setting->useSystemCaCerts()) {
         chkUseSystemCaCerts->setChecked(true);
-        kurCaCert->setEnabled(false);
-        kurCaCert->clear();
+        caCertLoad->setEnabled(false);
     } else {
         chkUseSystemCaCerts->setChecked(false);
-        QString capath = d->setting->capath();
-        if (!capath.isEmpty())
-            kurCaCert->setUrl(capath);
+        if (!d->setting->cacert().isEmpty()) {
+            setText(true);
+        } else {
+            setText(false);
+        }
     }
 
     if (d->setting->phase2autheap() != Knm::Security8021xSetting::EnumPhase2autheap::none) {
@@ -96,12 +103,9 @@ void TtlsWidget::writeConfig()
 
     if (chkUseSystemCaCerts->isChecked()) {
         d->setting->setUseSystemCaCerts(true);
-        d->setting->setCapath("");
+        d->setting->addToCertToDelete(Knm::Security8021xSetting::CACert);
     } else {
         d->setting->setUseSystemCaCerts(false);
-        url = kurCaCert->url();
-        if (!url.directory().isEmpty() && !url.fileName().isEmpty())
-            d->setting->setCapath(url.directory() + '/' + url.fileName());
     }
 
     d->innerAuth->writeConfig();
@@ -113,5 +117,37 @@ void TtlsWidget::readSecrets()
     d->innerAuth->readSecrets();
 }
 
+void TtlsWidget::loadCert()
+{
+    Q_D(EapMethodInnerAuth);
+    QString newcert = KFileDialog::getOpenFileName(KUser().homeDir(),"",this,i18nc("File chooser dialog title for certificate loading","Load Certificate"));
+    if (!newcert.isEmpty()) {
+        d->setting->setCacerttoimport(newcert);
+        setText(true);
+    }
+}
+
+void TtlsWidget::toggleSystemCa(bool toggled)
+{
+    Q_D(EapMethodInnerAuth);
+    if (toggled)
+        setText(false);
+    else if (!d->setting->cacert().isEmpty() || !d->setting->cacerttoimport().isEmpty())
+        setText(true);
+}
+
+void TtlsWidget::setText(bool loaded)
+{
+    if (loaded) {
+        caCertLoad->setText(i18nc("Text to display on certificate button a certificate is already loaded","Load new"));
+        caCertLoadedLabel->setText(i18nc("Text to display on CA certificate LED label when certificate is already loaded","Loaded"));
+        caCertLed->setState(KLed::On);
+    } else {
+        caCertLoad->setText(i18nc("Text to display on CA certificate button when no certificate is loaded yet","Load"));
+        caCertLoadedLabel->setText("");
+        caCertLed->setState(KLed::Off);
+    }
+}
+
 
 // vim: sw=4 sts=4 et tw=100
diff --git a/libs/ui/security/ttlswidget.h b/libs/ui/security/ttlswidget.h
index b1a9049..de7b19e 100644
--- a/libs/ui/security/ttlswidget.h
+++ b/libs/ui/security/ttlswidget.h
@@ -7,7 +7,7 @@ modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; either version 2 of
 the License or (at your option) version 3 or any later version
 accepted by the membership of KDE e.V. (or its successor approved
-by the membership of KDE e.V.), which shall act as a proxy 
+by the membership of KDE e.V.), which shall act as a proxy
 defined in Section 14 of version 3 of the license.
 
 This program is distributed in the hope that it will be useful,
@@ -40,6 +40,10 @@ public:
     void readConfig();
     void writeConfig();
     void readSecrets();
+    void setText(bool);
+private Q_SLOTS:
+    void loadCert();
+    void toggleSystemCa(bool);
 };
 
 #endif
diff --git a/settings/config/manageconnectionwidget.cpp b/settings/config/manageconnectionwidget.cpp
index 3c0d4dc..b7ca006 100644
--- a/settings/config/manageconnectionwidget.cpp
+++ b/settings/config/manageconnectionwidget.cpp
@@ -586,7 +586,7 @@ void ManageConnectionWidget::editGotSecrets(bool valid, const QString &errorMess
                 mSystemSettings->updateConnection(con->uuid().toString(), con);
         } else {
             if (con->scope() == Knm::Connection::User) {
-                if (deleteConnection(con->uuid().toString(), Knm::Connection::System)) {
+                if (deleteConnection(con->uuid().toString(), Knm::Connection::System, con->type())) {
                     saveConnection(con);
                 } else {
                     // FIXME: when changing one system connection to user scope con is a pointer to
@@ -600,7 +600,7 @@ void ManageConnectionWidget::editGotSecrets(bool valid, const QString &errorMess
                 }
             } else {
                 if (mSystemSettings->addConnection(con)) {
-                    deleteConnection(con->uuid().toString(), Knm::Connection::User);
+                    deleteConnection(con->uuid().toString(), Knm::Connection::User, con->type());
                     mConnections->replaceConnection(con);
                 } else {
                     restoreConnections();
@@ -628,24 +628,31 @@ void ManageConnectionWidget::addGotConnection(bool valid, const QString &errorMe
     }
 }
 
-
-bool ManageConnectionWidget::deleteConnection(QString id, Knm::Connection::Scope scope)
+bool ManageConnectionWidget::deleteConnection(QString id, Knm::Connection::Scope scope, Knm::Connection::Type type)
 {
-    // remove it from our hash
-    mUuidItemHash.remove(id);
-
-    if (scope == Knm::Connection::System) {
-        return mSystemSettings->removeConnection(id);
-    } else {
+    // delete it
+    if (scope == Knm::Connection::System)
+        mSystemSettings->removeConnection(id);
+    else {
         // remove secrets from wallet if using encrypted storage
         Knm::ConnectionPersistence::deleteSecrets(id);
 
-        // remove connection file
+        // delete everything related, like certificates
         QFile connFile(KStandardDirs::locateLocal("data",
                     Knm::ConnectionPersistence::CONNECTION_PERSISTENCE_PATH + id));
         if (!connFile.exists()) {
-            kDebug() << "Connection file not found: " << connFile.fileName();
+        kDebug() << "Connection file not found: " << connFile.fileName();
         }
+
+        Knm::Connection *con = new Knm::Connection(QUuid(id), type);
+        connectionPersistence = new Knm::ConnectionPersistence(con, KSharedConfig::openConfig(connFile.fileName()),
+            (Knm::ConnectionPersistence::SecretStorageMode)KNetworkManagerServicePrefs::self()->secretStorageMode());
+        connectionPersistence->load();
+        con->removeCertificates();
+        delete(connectionPersistence);
+        delete(con);
+
+        // remove connection file
         connFile.remove();
 
         // remove from networkmanagerrc
@@ -658,6 +665,9 @@ bool ManageConnectionWidget::deleteConnection(QString id, Knm::Connection::Scope
         prefs->writeConfig();
     }
 
+    // remove it from our hash
+    mUuidItemHash.remove(id);
+
     updateServiceAndUi(id, scope);
     return true;
 }
@@ -676,14 +686,15 @@ void ManageConnectionWidget::deleteClicked()
     }
     KMessageBox::Options options;
     options |= KMessageBox::Dangerous;
-    if ( KMessageBox::warningContinueCancel(this, 
+    if ( KMessageBox::warningContinueCancel(this,
         i18nc("Warning message on attempting to delete a connection", "Do you really want to delete the connection '%1'?",item->data(0, Qt::DisplayRole).toString()),
         i18n("Confirm Delete"),
         KStandardGuiItem::del())
         == KMessageBox::Continue) {
 
         Knm::Connection::Scope conScope = (Knm::Connection::Scope) item->data(0, ConnectionScopeRole).toUInt();
-        deleteConnection(connectionId, conScope);
+        Knm::Connection::Type type = (Knm::Connection::Type)item->data(0, ConnectionTypeRole).toUInt();
+        deleteConnection(connectionId, conScope, type);
     }
 }
 
diff --git a/settings/config/manageconnectionwidget.h b/settings/config/manageconnectionwidget.h
index 58afc12..51f60a0 100644
--- a/settings/config/manageconnectionwidget.h
+++ b/settings/config/manageconnectionwidget.h
@@ -61,8 +61,8 @@ public slots:
      */
     void activeConnectionsChanged();
 private slots:
-    /** 
-     * Add a new connection 
+    /**
+     * Add a new connection
      */
     void addClicked();
     /**
@@ -152,7 +152,8 @@ private:
     Knm::ConnectionPersistence *connectionPersistence;
     void loadConnection(Knm::Connection *con);
     void saveConnection(Knm::Connection *con);
-    bool deleteConnection(QString id, Knm::Connection::Scope scope);
+    bool deleteConnection(QString id, Knm::Connection::Scope scope, Knm::Connection::Type type);
+
     /**
      * Inform kded module about changed connection and update our
      * connections list in UI

commit 28fc8424569890da10f2625f7a6f0553a953ddc0
Author: Ilia Kats <ilia-kats@gmx.net>
Date:   Fri May 6 08:05:21 2011 +0200

    fix certificates not being deleted on system connection delete

diff --git a/backends/NetworkManager/nmdbussettingsconnectionprovider.cpp b/backends/NetworkManager/nmdbussettingsconnectionprovider.cpp
index b287e8e..f570e2b 100644
--- a/backends/NetworkManager/nmdbussettingsconnectionprovider.cpp
+++ b/backends/NetworkManager/nmdbussettingsconnectionprovider.cpp
@@ -155,6 +155,7 @@ void NMDBusSettingsConnectionProvider::onRemoteConnectionRemoved()
         // If connection changed scope do not delete it because it is still needed in the other scope.
         if ((d->serviceName.contains("NetworkManagerSystemSettings") && removed.first->scope() == Knm::Connection::System) ||
             (d->serviceName.contains("NetworkManagerUserSettings") && removed.first->scope() == Knm::Connection::User)) {
+            removed.first->removeCertificates();
             d->connectionList->removeConnection(removed.first);
         }
 

commit e1a41cb72ac5f0bca0bcdf95ba15709bfd72f4e5
Author: Gökçen Eraslan <gokcen@pardus.org.tr>
Date:   Fri May 6 13:43:05 2011 +0000

    Use the return value of editConnection method.
    
    Return value of editConnection method must be used to get connection
    changes. This also fixes the bug which is the password dialog pops up
    after users click to Cancel without changing anything in edit dialog.
    
    CCMAIL: kde-networkmanager@kde.org
    CCMAIL: arvidjaar@gmail.com

diff --git a/settings/config/manageconnectionwidget.cpp b/settings/config/manageconnectionwidget.cpp
index b7ca006..6d3dd44 100644
--- a/settings/config/manageconnectionwidget.cpp
+++ b/settings/config/manageconnectionwidget.cpp
@@ -576,7 +576,7 @@ void ManageConnectionWidget::editGotSecrets(bool valid, const QString &errorMess
     if (!con)
         return;
 
-    mEditor->editConnection(con); //starts editor window
+    con = mEditor->editConnection(con); //starts editor window
     if (con)
     {
         if (oldScope == con->scope()) {
