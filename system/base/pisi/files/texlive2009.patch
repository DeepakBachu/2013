diff -Nur pisi-2.3.2-old//pisi/actionsapi/texlivemodules.py pisi-2.3.2//pisi/actionsapi/texlivemodules.py
--- pisi-2.3.2-old//pisi/actionsapi/texlivemodules.py	2010-09-06 15:56:20.313000128 +0300
+++ pisi-2.3.2//pisi/actionsapi/texlivemodules.py	2010-09-06 15:56:30.898000106 +0300
@@ -12,7 +12,8 @@
 # standard python modules
 import os
 import glob
-
+import shutil
+import shlex
 import gettext
 __trans = gettext.translation('pisi', fallback=True)
 _ = __trans.ugettext
@@ -26,6 +27,7 @@
 from pisi.actionsapi.shelltools import *
 from pisi.actionsapi.pisitools import dodoc, dodir, domove, dosym, insinto, removeDir
 
+
 WorkDir = "%s-%s" % (get.srcNAME(), get.srcVERSION().split('_')[-1])
 
 class CompileError(pisi.actionsapi.Error):
@@ -49,12 +51,15 @@
 def compile(parameters = ''):
     '''compiling texlive packages'''
 
-    # Build format files
-    if buildFormatFiles():
-        raise CompileError, _('Building format files failed')
+    # Move sources according to tplobj files
+    if moveSources():
+        raise CompileError, _('Moving source files failed')
     # Generate config files
     if generateConfigFiles():
         raise CompileError, _('Generate config files failed')
+    # Build format files
+    if buildFormatFiles():
+        raise CompileError, _('Building format files failed')
 
 def install(parameters = ''):
     '''Installing texlive packages'''
@@ -63,23 +68,21 @@
     if createSymlinksFormat2Engines():
         raise InstallError, _('Creating symlinks from format to engines failed')
 
-    # Installing texmf, texmf-dist, tlpkg, texmf-var
-    if installTexmfFiles():
-        raise InstallError, _('Installing texmf files failed')
-
     # Installing docs
     if installDocFiles():
         raise InstallError, _('Installing docs failed')
 
+    # Installing texmf, texmf-dist, tlpkg, texmf-var
+    if installTexmfFiles():
+        raise InstallError, _('Installing texmf files failed')
+
     # Installing config files
     if installConfigFiles():
         raise InstallError, _('Installing config files failed')
 
     # Handle config files
-    if os.path.isdir("%s/texmf" % get.curDIR()):
-        cd("%s/usr/share/texmf" % get.installDIR())
-        if handleConfigFiles(".", "cfg", "cnf"):
-            raise Installing, _('Handle config files failed')
+    if handleConfigFiles():
+        raise Installing, _('Handle config files failed')
 
 
 def createSymlinksFormat2Engines():
@@ -104,26 +107,24 @@
                         sym(symbin[1], "%s/usr/bin/%s" % (get.installDIR(), symbin[0]))
         symfile.close()
 
-def installTexmfFiles():
-    '''Installing texmf, texmf-dist, tlpkg, texmf-var'''
-    for installdoc in ["texmf", "texmf-dist", "tlpkg", "texmf-var"]:
-        if os.path.isdir("%s/%s" % (get.curDIR(), installdoc)):
-            if not installdoc == "texmf-var":
-                copytree(installdoc, "%s/usr/share/%s" % (get.installDIR(), installdoc))
-            else:
-                copytree(installdoc, "%s/var/lib/texmf" % get.installDIR())
-
-
 def installDocFiles():
     '''Installing docs'''
-    if not "documentation" in get.srcNAME():
+    if "documentation" in get.srcNAME():
         if os.path.isdir("%s/texmf-doc" % get.curDIR()):
             copytree("texmf-doc", "%s/usr/share/texmf-doc" % get.installDIR())
     else:
         for removedir in ["texmf", "texmf-dist"]:
             if os.path.isdir("%s/%s/doc/" % (get.curDIR(), removedir)):
-                removeDir("/usr/share/%s/doc" % removedir )
+                shutil.rmtree("%s/%s/doc" % (get.curDIR(),removedir))
 
+def installTexmfFiles():
+    '''Installing texmf, texmf-dist, tlpkg, texmf-var'''
+    for installdoc in ["texmf", "texmf-dist", "tlpkg", "texmf-var"]:
+        if os.path.isdir("%s/%s" % (get.curDIR(), installdoc)):
+            if not installdoc == "texmf-var":
+                shutil.copytree(installdoc, "%s/usr/share/%s" % (get.installDIR(),installdoc))
+            else:
+                copytree(installdoc, "%s/var/lib/texmf" % get.installDIR())
 
 def installConfigFiles():
     '''Installing config files'''
@@ -142,31 +143,116 @@
     if can_access_file("%s/language.%s.dat" % (get.curDIR(), get.srcNAME())):
         insinto( "/etc/texmf/language.dat.d", "%s/language.%s.dat" % (get.curDIR(), get.srcNAME()))
 
-def handleConfigFiles(currdir,ext1, ext2):
+def handleConfigFiles():
     '''Handling config files'''
-    for conffile in ls(currdir):
-        configpath = os.path.join(currdir, conffile)
-        if os.path.isfile(configpath):
-             if configpath.endswith(ext1) or configpath.endswith(ext2):
-                if not "config" in configpath:
-                    handledir=currdir.split('/')
-                    if not os.path.isdir("%s/etc/texmf/%s.d" % (get.installDIR(),handledir[1])):
-                        ctx.ui.info(_('Creating /etc/texmf/%s.d') % handledir[1])
-                        dodir("/etc/texmf/%s.d" % handledir[1])
-                    domove("/usr/share/texmf/%s/%s" % (handledir[1], conffile), "/etc/texmf/%s.d" % handledir[1])
-                    dosym("/etc/texmf/%s.d/%s" % (handledir[1], conffile), "/usr/share/texmf/%s/%s" % (handledir[1], conffile))
+    for root, dirs,files in os.walk("%s/usr/share/texmf" % get.installDIR()):
+        if not ("config" in root or "doc" in root):
+            for configFile in files:
+                if configFile.endswith(("cfg", "cnf")):
+                    dirname = root.split("/")[-1]
+                    if not os.path.isdir("%s/etc/texmf/%s.d" % (get.installDIR(),dirname)):
+                        ctx.ui.info(_('Creating /etc/texmf/%s.d') % dirname)
+                        dodir("/etc/texmf/%s.d" % dirname)
+                    ctx.ui.info(_('Moving (and symlinking) /usr/share/texmf/%s to /etc/texmf/%s.d') % (configFile,dirname))
+                    domove("/usr/share/texmf/%s/%s" % (dirname,configFile), "/etc/texmf/%s.d" % dirname)
+                    dosym("/etc/texmf/%s.d/%s" % (dirname, configFile), "/usr/share/texmf/%s/%s" %(dirname, configFile))
+
+
+def addFormat(parameters):
+    '''Add format files'''
+    if not os.path.isdir("%s/texmf/fmtutil/" % get.curDIR()):
+        makedirs("%s/texmf/fmtutil/" % get.curDIR())
+    if not os.path.isfile("%s/texmf/fmtutil/format.%s.cnf" % (get.curDIR(),get.srcNAME())):
+        cnf_file = open("%s/texmf/fmtutil/format.%s.cnf" % (get.curDIR(),get.srcNAME()), "w")
+        cnf_file.write("# Generated for %s by actionsapi/texlivemodules.py\n" % get.srcNAME())
+        cnf_file.close()
+
+    # TODO: Use regex for code simplification
+    parameters = " ".join(parameters.split())   # Removing white-space characters
+    parameters = shlex.split(parameters)      # Split parameters until the value "option"
+    para_dict = {}
+    for option in parameters:
+        pair = option.strip()                   # Remove whitespaces before "options" value
+        pair = pair.split("=",1)                # The value "options" may have multiple "=", thus split just one time
+        if len(pair) == 2:                      # The list may contain values that are not pair
+            para_dict[pair[0]] = pair[1]
+            if not pair[0] == "patterns":
+                para_dict["patterns"] = '-'     # Specified in the texlive-module.eclass
+
+    cnf_file = open('%s/texmf/fmtutil/format.%s.cnf' % (get.curDIR(),get.srcNAME()), 'a')
+    cnf_file.write("%s\t%s\t%s\t%s\n" % (para_dict["name"], para_dict["engine"], para_dict["patterns"], para_dict["options"]))
+    cnf_file.close()
+
+
+def moveSources():
+    reloc = "texmf-dist"
+
+    for tlpobjfile in os.listdir("tlpkg/tlpobj/"):
+        jobsfile=open("tlpkg/tlpobj/%s" % tlpobjfile, "r")
+        for line in jobsfile.readlines():
+            if "RELOC" in line:
+                path = line.split("/", 1)[-1]
+                path = path.strip()
+                filename = path.split("/", -1)
+                dirname = os.path.dirname(path)
+                if not os.path.isdir("%s/%s" % (reloc,dirname)):
+                    os.system("mkdir -p %s/%s" % (reloc,dirname))
+                shutil.move("%s" % path , "%s/%s" % (reloc,dirname))
 
-        else:
-           handleConfigFiles(configpath,ext1, ext2)
 
 def buildFormatFiles():
     '''Build format files'''
     if os.path.isdir("%s/texmf/fmtutil/" % get.curDIR()):
-        makedirs("texmf-var/web2c")
         for formatfile in ls("%s/texmf/fmtutil/format*.cnf" % get.curDIR()):
+            makedirs("%s/texmf-var/web2c/" % get.curDIR())
             ctx.ui.info(_('Building format file %s') % formatfile)
-            export("TEXMFHOME", "texmf:texmf-dist")
-            system("fmtutil --cnffile %s --fmtdir texmf-var/web2c --all" % formatfile)
+            export("TEXMFHOME", "%s/texmf:/%stexmf-dist:%s/texmf-var" %(get.curDIR(), get.curDIR(), get.curDIR() ))
+            export("VARTEXFONTS", "fonts")
+            system("env -u TEXINPUTS fmtutil --cnffile %s --fmtdir texmf-var/web2c --all" % formatfile)
+
+def addLanguageDat(parameter):
+    '''Create language.*.dat files'''
+    parameter = parameter.split()
+    para_dict={}
+    for option in parameter:
+        pair = option.split("=")
+        if len(pair) == 2: #That's just a caution, the pair should have two items, not more not less
+            para_dict[pair[0]] = pair[1]
+
+    language_dat = open('%s/language.%s.dat' % (get.curDIR(),get.srcNAME())  , 'a')
+    language_dat.write("%s\t%s\n" % (para_dict["name"], para_dict["file"]))
+    language_dat.close()
+
+    if "synonyms" in para_dict:
+        language_dat = open('%s/language.%s.dat' % (get.curDIR(),get.srcNAME())  , 'a')
+        language_dat.write("=%s\n" % para_dict["synonyms"])
+        language_dat.close()
+
+
+def addLanguageDef(parameter):
+    '''Create language.*.def files'''
+    parameter = parameter.split()
+    para_dict={}
+    for option in parameter:
+        pair = option.split("=")
+        if len(pair) == 2: #That's just a caution, the pair should have two items, not more not less
+            para_dict[pair[0]] = pair[1]
+
+    if "lefthyphenmin" in para_dict and not para_dict["lefthyphenmin"]:
+        para_dict["lefthyphenmin"] = "2"
+    if "righthyphenmin" in para_dict and not para_dict["righthyphenmin"]:
+        para_dict["righthyphenmin"] = "3"
+
+    language_def = open('%s/language.%s.def' % (get.curDIR(),get.srcNAME())  , 'a')
+    language_def.write("\\addlanguage{%s}{%s}{}{%s}{%s}\n" % (para_dict["name"], para_dict["file"],  para_dict["lefthyphenmin"],  para_dict["righthyphenmin"]))
+    language_def.close()
+
+    if "synonyms" in para_dict:
+        language_def = open('%s/language.%s.def' % (get.curDIR(),get.srcNAME())  , 'a')
+        language_def.write("\\addlanguage{%s}{%s}{}{%s}{%s}\n" % (para_dict["synonyms"], para_dict["file"],  para_dict["lefthyphenmin"],  para_dict["righthyphenmin"]))
+        language_def.close()
+
+
 
 def generateConfigFiles():
     '''Generate config files'''
@@ -190,52 +276,13 @@
                     echo("%s/%s-config" % (get.curDIR(), get.srcNAME()), "f %s" % parameter)
                     ctx.ui.info(_('f %s is added to %s/%s-config') % (parameter, get.curDIR(), get.srcNAME()))
                 elif command == "AddHyphen":
-                    makeLanguagesDefDatLines(parameter)
+                    addLanguageDat(parameter)
+                    addLanguageDef(parameter)
+                elif command == "AddFormat":
+                    addFormat(parameter)
                 elif command == "BuildFormat":
                     ctx.ui.info(_('Language file  %s  already generated.') % parameter)
                 elif command == "BuildLanguageDat":
                     ctx.ui.info(_('No rule to proccess %s. Please file a bug.') % command)
         jobsfile.close()
 
-def makeLanguagesDefDatLines(parameter):
-    '''Make Languages Def Dat Lines'''
-    splitspace=parameter.split(None)
-    if len(splitspace) == 4:
-        name = splitspace[0].split("=")
-
-        lefthyphenmin = splitspace[1].split("=")
-        if not lefthyphenmin[1]:
-            lefthyphenmin[1]= "2"
-
-        righthyphenmin = splitspace[2].split("=")
-        if not righthyphenmin[1]:
-            righthyphenmin[1]= "3"
-
-        datdeffile = splitspace[3].split("=")
-    else:
-        name = splitspace[0].split("=")
-        synonyms = splitspace[1].split("=")
-
-        lefthyphenmin = splitspace[2].split("=")
-        if not lefthyphenmin[1]:
-             lefthyphenmin[1]= "2"
-
-        righthyphenmin = splitspace[3].split("=")
-        if not righthyphenmin[1]:
-            righthyphenmin[1]= "3"
-
-        datdeffile = splitspace[4].split("=")
-
-        synonym = synonyms[1].split(",")
-        for i in range(len(synonym)):
-            echo("%s/language.%s.def" % (get.curDIR(), get.srcNAME()), "\\languages{%s}{%s}{}{%s}{%s}" % (synonym[i], datdeffile[1], lefthyphenmin[1], righthyphenmin[1]))
-            ctx.ui.info(_('\\languages{%s}{%s}{}{%s}{%s} is added to %s/language.%s.def') % (synonym[i], datdeffile[1], lefthyphenmin[1], righthyphenmin[1], get.curDIR(), get.srcNAME()))
-
-            echo("%s/language.%s.dat" % (get.curDIR(), get.srcNAME()), "=%s"  % (synonym[i]))
-            ctx.ui.info(_('%s is added to %s/language.%s.dat') % (synonym[i], get.curDIR(), get.srcNAME()))
-
-    echo("%s/language.%s.def" % (get.curDIR(), get.srcNAME()), "\\languages{%s}{%s}{}{%s}{%s}" % (name[1], datdeffile[1], lefthyphenmin[1], righthyphenmin[1]))
-    ctx.ui.info(_('\\languages{%s}{%s}{}{%s}{%s} is added to %s/language.%s.def ') % (name[1], datdeffile[1], lefthyphenmin[1], righthyphenmin[1], get.curDIR(), get.srcNAME()))
-
-    echo("%s/language.%s.dat" % (get.curDIR(), get.srcNAME()), "%s %s"  % (name[1], datdeffile[1]))
-    ctx.ui.info(_('%s %s is added to %s/language.%s.dat ') % (name[1], datdeffile[1], get.curDIR(), get.srcNAME()))
