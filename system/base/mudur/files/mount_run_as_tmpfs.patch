--- bin/mudur.py.orig	2012-10-16 15:47:32.000000000 +0300
+++ bin/mudur.py	2012-10-16 15:48:56.086311247 +0300
@@ -274,7 +274,7 @@
 
         # Fill in the options
         self.options["live"] = options.has_key("thin") or \
-                               os.path.exists("/var/run/pardus/livemedia")
+                               os.path.exists("/run/pardus/livemedia")
 
         for k in [_k for _k in options.keys() if _k not in ("thin")]:
             self.options[k] = options[k] if options[k] else True
@@ -665,16 +665,16 @@
     if not os.path.exists("/var/lib/dbus/machine-id"):
         run("/usr/bin/dbus-uuidgen", "--ensure")
     run("/sbin/start-stop-daemon", "-b", "--start", "--quiet",
-        "--pidfile", "/var/run/dbus/pid", "--exec", "/usr/bin/dbus-daemon",
+        "--pidfile", "/run/dbus/pid", "--exec", "/usr/bin/dbus-daemon",
         "--", "--system")
-    wait_bus("/var/run/dbus/system_bus_socket")
+    wait_bus("/run/dbus/system_bus_socket")
 
 @plymouth_update_milestone
 def stop_dbus():
     """Stops the D-Bus service."""
     ui.info(_("Stopping %s") % "DBus")
     run("/sbin/start-stop-daemon", "--stop", "--quiet",
-            "--pidfile", "/var/run/dbus/pid")
+            "--pidfile", "/run/dbus/pid")
 
 #############################
 # UDEV management functions #
@@ -719,6 +719,8 @@
 @plymouth_update_milestone
 def start_udev():
     """Prepares the startup of udev daemon and starts it."""
+    # /run must be mounted as tmpfs
+    run_quiet("/bin/mount", "-t", "tmpfs", "-o", "mode=755", "tmpfs", "/run")
 
     # When these files are missing, lots of trouble happens
     # so we double check their existence
@@ -1026,7 +1028,7 @@
     """Cleans up /var upon boot."""
     ui.info(_("Cleaning up /var"))
     blacklist = ["utmp", "random-seed", "livemedia"]
-    for root, dirs, files in os.walk("/var/run"):
+    for root, dirs, files in os.walk("/run"):
         for _file in files:
             if _file not in blacklist:
                 try:
@@ -1280,12 +1282,12 @@
         wait_for_udev_events()
 
         # When we exit this runlevel, init will write a boot record to utmp
-        write_to_file("/var/run/utmp")
+        write_to_file("/run/utmp")
         touch("/var/log/wtmp")
 
-        run("/bin/chgrp", "utmp", "/var/run/utmp", "/var/log/wtmp")
+        run("/bin/chgrp", "utmp", "/run/utmp", "/var/log/wtmp")
 
-        os.chmod("/var/run/utmp", 0664)
+        os.chmod("/run/utmp", 0664)
         os.chmod("/var/log/wtmp", 0664)
 
     ### BOOT ###
