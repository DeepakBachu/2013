
 (oe) backported from:
 https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2010-3492
 http://bugs.python.org/issue6706
 http://svn.python.org/view?view=rev&revision=85220
 
 See http://bugs.pardus.org.tr/show_bug.cgi?id=14993

diff -Naurp Python-2.7/Lib/asyncore.py Python-2.7.oden/Lib/asyncore.py
--- Python-2.7/Lib/asyncore.py	2010-05-18 22:04:31.000000000 +0200
+++ Python-2.7.oden/Lib/asyncore.py	2010-10-30 12:49:33.507257476 +0200
@@ -350,12 +350,15 @@ class dispatcher:
         # XXX can return either an address pair or None
         try:
             conn, addr = self.socket.accept()
-            return conn, addr
+        except TypeError:
+            return None
         except socket.error, why:
-            if why.args[0] == EWOULDBLOCK:
-                pass
+            if why.args[0] in (EWOULDBLOCK, ECONNABORTED):
+                return None
             else:
                 raise
+        else:
+            return conn, addr
 
     def send(self, data):
         try:
@@ -501,7 +504,13 @@ class dispatcher:
         self.log_info('unhandled connect event', 'warning')
 
     def handle_accept(self):
-        self.log_info('unhandled accept event', 'warning')
+        pair = self.accept()
+        if pair is not None:
+            self.handle_accepted(*pair)
+
+    def handle_accepted(self, sock, addr):
+        sock.close()
+        self.log_info('unhandled accepted event', 'warning')
 
     def handle_close(self):
         self.log_info('unhandled close event', 'warning')
diff -Naurp Python-2.7/Lib/smtpd.py Python-2.7.oden/Lib/smtpd.py
--- Python-2.7/Lib/smtpd.py	2010-10-30 12:42:18.548238626 +0200
+++ Python-2.7.oden/Lib/smtpd.py	2010-10-30 12:50:25.213542118 +0200
@@ -298,21 +298,7 @@ class SMTPServer(asyncore.dispatcher):
                 self.__class__.__name__, time.ctime(time.time()),
                 localaddr, remoteaddr)
 
-    def handle_accept(self):
-        try:
-            conn, addr = self.accept()
-        except TypeError:
-            # sometimes accept() might return None
-            return
-        except socket.error as err:
-            # ECONNABORTED might be thrown
-            if err.args[0] != errno.ECONNABORTED:
-                raise
-            return
-        else:
-            # sometimes addr == None instead of (ip, port)
-            if addr == None:
-                return
+    def handle_accepted(self, conn, addr):
         print >> DEBUGSTREAM, 'Incoming connection from %s' % repr(addr)
         channel = SMTPChannel(self, conn, addr)
 
diff -Naurp Python-2.7/Lib/test/test_asyncore.py Python-2.7.oden/Lib/test/test_asyncore.py
--- Python-2.7/Lib/test/test_asyncore.py	2010-05-18 22:04:31.000000000 +0200
+++ Python-2.7.oden/Lib/test/test_asyncore.py	2010-10-30 12:52:55.228977857 +0200
@@ -295,7 +295,6 @@ class DispatcherTests(unittest.TestCase)
             d.handle_read()
             d.handle_write()
             d.handle_connect()
-            d.handle_accept()
         finally:
             sys.stdout = stdout
 
@@ -303,8 +302,7 @@ class DispatcherTests(unittest.TestCase)
         expected = ['warning: unhandled incoming priority event',
                     'warning: unhandled read event',
                     'warning: unhandled write event',
-                    'warning: unhandled connect event',
-                    'warning: unhandled accept event']
+                    'warning: unhandled connect event']
         self.assertEquals(lines, expected)
 
     def test_issue_8594(self):
@@ -436,6 +434,9 @@ class BaseTestHandler(asyncore.dispatche
     def handle_accept(self):
         raise Exception("handle_accept not supposed to be called")
 
+    def handle_accepted(self):
+        raise Exception("handle_accepted not supposed to be called")
+
     def handle_connect(self):
         raise Exception("handle_connect not supposed to be called")
 
@@ -466,8 +467,7 @@ class TCPServer(asyncore.dispatcher):
     def address(self):
         return self.socket.getsockname()[:2]
 
-    def handle_accept(self):
-        sock, addr = self.accept()
+    def handle_accepted(self, sock, addr):
         self.handler(sock)
 
     def handle_error(self):
@@ -531,6 +531,29 @@ class BaseTestAPI(unittest.TestCase):
         client = BaseClient(server.address)
         self.loop_waiting_for_flag(server)
 
+    def test_handle_accepted(self):
+        # make sure handle_accepted() is called when a client connects
+
+        class TestListener(BaseTestHandler):
+
+            def __init__(self):
+                BaseTestHandler.__init__(self)
+                self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
+                self.bind((HOST, 0))
+                self.listen(5)
+                self.address = self.socket.getsockname()[:2]
+
+            def handle_accept(self):
+                asyncore.dispatcher.handle_accept(self)
+
+            def handle_accepted(self, sock, addr):
+                self.flag = True
+
+        server = TestListener()
+        client = BaseClient(server.address)
+        self.loop_waiting_for_flag(server)
+
+
     def test_handle_read(self):
         # make sure handle_read is called on data received
 
diff -Naurp Python-2.7/Lib/test/test_ftplib.py Python-2.7.oden/Lib/test/test_ftplib.py
--- Python-2.7/Lib/test/test_ftplib.py	2010-05-06 22:19:32.000000000 +0200
+++ Python-2.7.oden/Lib/test/test_ftplib.py	2010-10-30 12:56:28.093634352 +0200
@@ -238,8 +238,7 @@ class DummyFTPServer(asyncore.dispatcher
         self.active = False
         self.join()
 
-    def handle_accept(self):
-        conn, addr = self.accept()
+    def handle_accepted(self, conn, addr):
         self.handler = self.handler(conn)
         self.close()
 
diff -Naurp Python-2.7/Lib/test/test_poplib.py Python-2.7.oden/Lib/test/test_poplib.py
--- Python-2.7/Lib/test/test_poplib.py	2010-04-28 01:55:59.000000000 +0200
+++ Python-2.7.oden/Lib/test/test_poplib.py	2010-10-30 12:57:25.616407793 +0200
@@ -138,8 +138,7 @@ class DummyPOP3Server(asyncore.dispatche
         self.active = False
         self.join()
 
-    def handle_accept(self):
-        conn, addr = self.accept()
+    def handle_accepted(self, conn, addr):
         self.handler = self.handler(conn)
         self.close()
 
diff -Naurp Python-2.7/Lib/test/test_smtplib.py Python-2.7.oden/Lib/test/test_smtplib.py
--- Python-2.7/Lib/test/test_smtplib.py	2010-05-06 22:19:32.000000000 +0200
+++ Python-2.7.oden/Lib/test/test_smtplib.py	2010-10-30 12:58:16.358619285 +0200
@@ -376,8 +376,7 @@ class SimSMTPServer(smtpd.SMTPServer):
         self._extra_features = []
         smtpd.SMTPServer.__init__(self, *args, **kw)
 
-    def handle_accept(self):
-        conn, addr = self.accept()
+    def handle_accepted(self, conn, addr):
         self._SMTPchannel = SimSMTPChannel(self._extra_features,
                                            self, conn, addr)
 
diff -Naurp Python-2.7/Lib/test/test_ssl.py Python-2.7.oden/Lib/test/test_ssl.py
--- Python-2.7/Lib/test/test_ssl.py	2010-05-06 16:11:23.000000000 +0200
+++ Python-2.7.oden/Lib/test/test_ssl.py	2010-10-30 12:59:07.863894779 +0200
@@ -513,8 +513,7 @@ else:
                 self.port = test_support.bind_port(self.socket)
                 self.listen(5)
 
-            def handle_accept(self):
-                sock_obj, addr = self.accept()
+            def handle_accepted(self, sock_obj, addr):
                 if test_support.verbose:
                     sys.stdout.write(" server:  new connection from %s:%s\n" %addr)
                 self.ConnectionHandler(sock_obj, self.certfile)
