Index: linux-2.6.35/fs/aufs/aufs.h
===================================================================
--- linux-2.6.35.orig/fs/aufs/aufs.h
+++ linux-2.6.35/fs/aufs/aufs.h
@@ -56,6 +56,7 @@
 #include "vfsub.h"
 #include "whout.h"
 #include "wkq.h"
+#include "../internal.h"
 
 #endif /* __KERNEL__ */
 #endif /* __AUFS_H__ */
Index: linux-2.6.35/fs/aufs/branch.c
===================================================================
--- linux-2.6.35.orig/fs/aufs/branch.c
+++ linux-2.6.35/fs/aufs/branch.c
@@ -844,6 +844,7 @@ static int au_br_mod_files_ro(struct sup
 	struct dentry *dentry;
 	struct inode *inode;
 	struct au_hfile *hfile;
+	struct list_head *list;
 	const int step_bytes = 1024, /* memory allocation unit */
 		step_files = step_bytes / sizeof(*a);
 
@@ -857,7 +858,8 @@ static int au_br_mod_files_ro(struct sup
 
 	/* no need file_list_lock() since sbinfo is locked? defered? */
 	br_id = au_sbr_id(sb, bindex);
-	list_for_each_entry(file, &sb->s_files, f_u.fu_list) {
+	list = &(sb)->s_files;
+	list_for_each_entry(file, list, f_u.fu_list) {
 		if (special_file(file->f_dentry->d_inode->i_mode))
 			continue;
 		dentry = file->f_dentry;
Index: linux-2.6.35/fs/aufs/dir.c
===================================================================
--- linux-2.6.35.orig/fs/aufs/dir.c
+++ linux-2.6.35/fs/aufs/dir.c
@@ -213,7 +213,7 @@ static int aufs_release_dir(struct inode
 	fidir = finfo->fi_hdir;
 	if (fidir) {
 		/* remove me from sb->s_files */
-		file_kill(file);
+		file_sb_list_del(file);
 
 		vdir_cache = fidir->fd_vdir_cache; /* lock-free */
 		if (vdir_cache)
Index: linux-2.6.35/fs/aufs/f_op.c
===================================================================
--- linux-2.6.35.orig/fs/aufs/f_op.c
+++ linux-2.6.35/fs/aufs/f_op.c
@@ -82,7 +82,7 @@ int aufs_release_nondir(struct inode *in
 	bindex = finfo->fi_btop;
 	if (bindex >= 0) {
 		/* remove me from sb->s_files */
-		file_kill(file);
+		file_sb_list_del(file);
 		au_set_h_fptr(file, bindex, NULL);
 	}
 
Index: linux-2.6.35/fs/aufs/i_op.c
===================================================================
--- linux-2.6.35.orig/fs/aufs/i_op.c
+++ linux-2.6.35/fs/aufs/i_op.c
@@ -668,9 +668,11 @@ static int aufs_setattr(struct dentry *d
 
 		if (ia->ia_size < i_size_read(inode)) {
 			/* unmap only */
-			err = simple_setsize(inode, ia->ia_size);
+			truncate_setsize(inode, ia->ia_size);
+			/*
 			if (unlikely(err))
 				goto out_unlock;
+			*/
 		}
 
 		f = NULL;
Index: linux-2.6.35/fs/aufs/sysfs.c
===================================================================
--- linux-2.6.35.orig/fs/aufs/sysfs.c
+++ linux-2.6.35/fs/aufs/sysfs.c
@@ -203,7 +203,7 @@ void sysaufs_br_init(struct au_branch *b
 	sysfs_attr_init(attr);
 	attr->name = br->br_name;
 	attr->mode = S_IRUGO;
-	attr->owner = THIS_MODULE;
+	/*attr->owner = THIS_MODULE;*/
 }
 
 void sysaufs_brs_del(struct super_block *sb, aufs_bindex_t bindex)
Index: linux-2.6.35/fs/aufs/vfsub.c
===================================================================
--- linux-2.6.35.orig/fs/aufs/vfsub.c
+++ linux-2.6.35/fs/aufs/vfsub.c
@@ -573,7 +573,7 @@ int vfsub_trunc(struct path *h_path, lof
 
 	err = locks_verify_truncate(h_inode, h_file, length);
 	if (!err)
-		err = security_path_truncate(h_path, length, attr);
+		err = security_path_truncate(h_path);
 	if (!err)
 		err = do_truncate(h_path->dentry, length, attr, h_file);
 
